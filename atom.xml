<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Peter's Blog]]></title>
  <link href="http://codefunny.github.io/atom.xml" rel="self"/>
  <link href="http://codefunny.github.io/"/>
  <updated>2015-08-10T11:49:41+08:00</updated>
  <id>http://codefunny.github.io/</id>
  <author>
    <name><![CDATA[Peter]]></name>
    <email><![CDATA[winchaozheng@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[【iOS】HTTPS的使用学习]]></title>
    <link href="http://codefunny.github.io/blog/2015/08/10/ios-https/"/>
    <updated>2015-08-10T11:46:31+08:00</updated>
    <id>http://codefunny.github.io/blog/2015/08/10/ios-https</id>
    <content type="html"><![CDATA[<p>使用HTTPS最主要的考虑就是数据的安全性。对于HTTPS如何确保数据安全，依靠的就是SSL/TSL层的加密机制。HTTPS也就是在原来的HTTP层的基础上增加了一个安全层。</p>

<p>我们需要了解的是HTTPS在建立安全连接时采取四次握手机制,会话密钥的产生。使用会话密钥主要是因为建立安全机制的密钥算法是非对称算法(一般是RSA)，计算比较耗时，而会话密钥使用的是对称密钥，可以提高会话的效率。</p>

<!-- more -->


<ol>
<li>客户端向服务器端发起连接请求，上送信息有：支持协议版本、随机数1、加密方法、支持压缩算法；</li>
<li>服务器回应，下发信息有：确认协议版本、随机数2、确认加密方法、服务器公钥证书；</li>
<li>客户端再次上送信息：随机数3(采用公钥加密)、编码改变通知、客户端握手结束通知；</li>
<li>服务器采用随机数1、随机数2和随机数3组成会话密钥，并回应：编码改变通知、服务器握手结束通知。</li>
</ol>


<p>以上四次握手中，完成了几件事情，第一，证书下发；第二，会话密钥；第三，确认双方参数(双方协议版本、加密方法等)。其中随机数1和随机数2是明文，随机数3是密文，之所以采用三个随机数来确定会话密钥，主要是三组随机数组成的随机数，确保了随机数的随机性，从而保证每次生成的会话密钥的安全性。</p>

<p>在默认情况下，iOS要求连接的HTTPS站点必须为CA签名过得合法证书。AFNetworking基于iOS的HTTP网络通讯库，自然在证书方面要求和系统是一致，也需要合法的站点证书。所以探讨HTTPS在iOS开发中的使用，我们主要考虑两个问题，一个是合法证书，一个是自建证书。</p>

<p>先来了解一下系统API的验证流程，HTTPS的相关API在Security.Framework中，如下：</p>

<ol>
<li>获取需要验证的信任对象(Trust Object)，在NSURLConnection来说，是从delegate方法<strong>-connection:willSendRequestForAuthenticationChallenge:</strong>回调回来的参数challenge中获取(<strong>[challenge.protectionSpace serverTrust]</strong>);</li>
<li>采用系统默认方式验证Trust Object,SecTrustEvaluate会根据Trust Object的验证策略，一级一级往上，验证证书上每一级数字签名的有效性，从而评估证书的有效性；</li>
<li>通过上一步，一般安全要求下，直接验证通过，下一步使用Trust Object生成一份凭证(<strong>[NSURLCredential credentialForTrust:serverTrust]</strong>)，传入challenge的sender中(<strong>[challenge.sender useCredential:cred forAuthenticationChallenge:challenge]</strong>)处理，建立连接；</li>
<li>如果有更强的安全要求，还可以继续对Trust Object进行更严格验证，常用方式为在本地导入证书，验证Trust Object与导入证书是否匹配；</li>
<li>如果验证失败，取消此次Challenge-Response Authentication验证流程，拒绝连接请求。</li>
</ol>


<p>如果是自建证书，那么会跳过第二步，因为自建证书的根CA数字签名不在系统的信任列表中。</p>

<p>上代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// Now start the connection</span>
</span><span class='line'><span class="bp">NSURL</span> <span class="o">*</span> <span class="n">httpsURL</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSURL</span> <span class="nl">URLWithString</span><span class="p">:</span><span class="s">@&quot;https://www.google.com&quot;</span><span class="p">];</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">connection</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSURLConnection</span> <span class="nl">connectionWithRequest</span><span class="p">:[</span><span class="bp">NSURLRequest</span> <span class="nl">requestWithURL</span><span class="p">:</span><span class="n">httpsURL</span><span class="p">]</span> <span class="nl">delegate</span><span class="p">:</span><span class="nb">self</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//回调</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">connection:</span><span class="p">(</span><span class="bp">NSURLConnection</span> <span class="o">*</span><span class="p">)</span><span class="nv">connection</span> <span class="nf">willSendRequestForAuthenticationChallenge:</span><span class="p">(</span><span class="bp">NSURLAuthenticationChallenge</span> <span class="o">*</span><span class="p">)</span><span class="nv">challenge</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//1)获取trust object</span>
</span><span class='line'>    <span class="n">SecTrustRef</span> <span class="n">trust</span> <span class="o">=</span> <span class="n">challenge</span><span class="p">.</span><span class="n">protectionSpace</span><span class="p">.</span><span class="n">serverTrust</span><span class="p">;</span>
</span><span class='line'>    <span class="n">SecTrustResultType</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">//2)SecTrustEvaluate对trust进行验证</span>
</span><span class='line'>    <span class="n">OSStatus</span> <span class="n">status</span> <span class="o">=</span> <span class="n">SecTrustEvaluate</span><span class="p">(</span><span class="n">trust</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">result</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">errSecSuccess</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>        <span class="p">(</span><span class="n">result</span> <span class="o">==</span> <span class="n">kSecTrustResultProceed</span> <span class="o">||</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">==</span> <span class="n">kSecTrustResultUnspecified</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">//3)验证成功，生成NSURLCredential凭证cred，告知challenge的sender使用这个凭证来继续连接</span>
</span><span class='line'>        <span class="bp">NSURLCredential</span> <span class="o">*</span><span class="n">cred</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSURLCredential</span> <span class="nl">credentialForTrust</span><span class="p">:</span><span class="n">trust</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">challenge</span><span class="p">.</span><span class="n">sender</span> <span class="nl">useCredential</span><span class="p">:</span><span class="n">cred</span> <span class="nl">forAuthenticationChallenge</span><span class="p">:</span><span class="n">challenge</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//5)验证失败，取消这次验证流程</span>
</span><span class='line'>        <span class="p">[</span><span class="n">challenge</span><span class="p">.</span><span class="n">sender</span> <span class="nl">cancelAuthenticationChallenge</span><span class="p">:</span><span class="n">challenge</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于自建证书我们需要先在本地导入证书，设置成需要验证的Anchor Certificate，再来验证。如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//先导入证书</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span> <span class="n">cerPath</span> <span class="o">=</span> <span class="p">...;</span> <span class="c1">//证书的路径</span>
</span><span class='line'><span class="bp">NSData</span> <span class="o">*</span> <span class="n">cerData</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSData</span> <span class="nl">dataWithContentsOfFile</span><span class="p">:</span><span class="n">cerPath</span><span class="p">];</span>
</span><span class='line'><span class="n">SecCertificateRef</span> <span class="n">certificate</span> <span class="o">=</span> <span class="n">SecCertificateCreateWithData</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="p">(</span><span class="k">__bridge</span> <span class="n">CFDataRef</span><span class="p">)(</span><span class="n">cerData</span><span class="p">));</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">trustedCertificates</span> <span class="o">=</span> <span class="l">@[</span><span class="n">CFBridgingRelease</span><span class="p">(</span><span class="n">certificate</span><span class="p">)</span><span class="l">]</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//回调</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">connection:</span><span class="p">(</span><span class="bp">NSURLConnection</span> <span class="o">*</span><span class="p">)</span><span class="nv">connection</span> <span class="nf">willSendRequestForAuthenticationChallenge:</span><span class="p">(</span><span class="bp">NSURLAuthenticationChallenge</span> <span class="o">*</span><span class="p">)</span><span class="nv">challenge</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//1)获取trust object</span>
</span><span class='line'>    <span class="n">SecTrustRef</span> <span class="n">trust</span> <span class="o">=</span> <span class="n">challenge</span><span class="p">.</span><span class="n">protectionSpace</span><span class="p">.</span><span class="n">serverTrust</span><span class="p">;</span>
</span><span class='line'>    <span class="n">SecTrustResultType</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//注意：这里将之前导入的证书设置成下面验证的Trust Object的anchor certificate</span>
</span><span class='line'>    <span class="n">SecTrustSetAnchorCertificates</span><span class="p">(</span><span class="n">trust</span><span class="p">,</span> <span class="p">(</span><span class="k">__bridge</span> <span class="n">CFArrayRef</span><span class="p">)</span><span class="nb">self</span><span class="p">.</span><span class="n">trustedCertificates</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//2)SecTrustEvaluate会查找前面SecTrustSetAnchorCertificates设置的证书或者系统默认提供的证书，对trust进行验证</span>
</span><span class='line'>    <span class="n">OSStatus</span> <span class="n">status</span> <span class="o">=</span> <span class="n">SecTrustEvaluate</span><span class="p">(</span><span class="n">trust</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">result</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">errSecSuccess</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>        <span class="p">(</span><span class="n">result</span> <span class="o">==</span> <span class="n">kSecTrustResultProceed</span> <span class="o">||</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">==</span> <span class="n">kSecTrustResultUnspecified</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//3)验证成功，生成NSURLCredential凭证cred，告知challenge的sender使用这个凭证来继续连接</span>
</span><span class='line'>        <span class="bp">NSURLCredential</span> <span class="o">*</span><span class="n">cred</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSURLCredential</span> <span class="nl">credentialForTrust</span><span class="p">:</span><span class="n">trust</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">challenge</span><span class="p">.</span><span class="n">sender</span> <span class="nl">useCredential</span><span class="p">:</span><span class="n">cred</span> <span class="nl">forAuthenticationChallenge</span><span class="p">:</span><span class="n">challenge</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//5)验证失败，取消这次验证流程</span>
</span><span class='line'>        <span class="p">[</span><span class="n">challenge</span><span class="p">.</span><span class="n">sender</span> <span class="nl">cancelAuthenticationChallenge</span><span class="p">:</span><span class="n">challenge</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>一般我们很少直接使用原生API，而是使用AFNetworking封装好的接口来完成以上繁琐的过程，目前AFNetworking也已经更新到2.x版本了。</p>

<p>一般我们只需要如下代码就可使接口支持HTTPS：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">AFSecurityPolicy</span> <span class="o">*</span><span class="n">securityPolicy</span> <span class="o">=</span> <span class="p">[</span><span class="n">AFSecurityPolicy</span> <span class="n">defaultPolicy</span><span class="p">];</span>
</span><span class='line'>    <span class="n">securityPolicy</span><span class="p">.</span><span class="n">allowInvalidCertificates</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于自建证书，AFNetworking2也是支持的，需要将pem格式的证书转成cer格式的，可以在mac下使用如下命令行：<strong>openssl x509 -in &lt;你的服务器证书>.pem -outform der -out server.cer</strong>将该证书引入到ap的bundle目录里，AFNetworking会自动扫描boundle中的.cer文件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">AFSecurityPolicy</span> <span class="o">*</span><span class="n">securityPolicy</span> <span class="o">=</span> <span class="p">[</span><span class="n">AFSecurityPolicy</span> <span class="n">AFSSLPinningModeCertificate</span><span class="p">];</span>
</span><span class='line'><span class="err">或者</span>
</span><span class='line'><span class="n">AFSecurityPolicy</span> <span class="o">*</span><span class="n">securityPolicy</span> <span class="o">=</span> <span class="p">[</span><span class="n">AFSecurityPolicy</span> <span class="n">AFSSLPinningModePublicKey</span><span class="p">];</span>
</span><span class='line'><span class="n">securityPolicy</span><span class="p">.</span><span class="n">allowInvalidCertificates</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span> <span class="c1">//还是必须设成YES</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面只列了一个参数，我想下面技术最好都要知道：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//allowInvalidCertificates 是否允许无效证书（也就是自建的证书），默认为NO</span>
</span><span class='line'><span class="c1">//如果是需要验证自建证书，需要设置为YES</span>
</span><span class='line'><span class="n">securityPolicy</span><span class="p">.</span><span class="n">allowInvalidCertificates</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//validatesDomainName 是否需要验证域名，默认为YES；</span>
</span><span class='line'><span class="c1">//假如证书的域名与你请求的域名不一致，需把该项设置为NO</span>
</span><span class='line'><span class="c1">//主要用于这种情况：客户端请求的是子域名，而证书上的是另外一个域名。因为SSL证书上的域名是独立的，假如证书上注册的域名是www.google.com，那么mail.google.com是无法验证通过的；当然，有钱可以注册通配符的域名*.google.com，但这个还是比较贵的。</span>
</span><span class='line'><span class="n">securityPolicy</span><span class="p">.</span><span class="n">validatesDomainName</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//validatesCertificateChain 是否验证整个证书链，默认为YES</span>
</span><span class='line'><span class="c1">//设置为YES，会将服务器返回的Trust Object上的证书链与本地导入的证书进行对比，这就意味着，假如你的证书链是这样的：</span>
</span><span class='line'><span class="c1">//GeoTrust Global CA </span>
</span><span class='line'><span class="c1">//    Google Internet Authority G2</span>
</span><span class='line'><span class="c1">//        *.google.com</span>
</span><span class='line'><span class="c1">//那么，除了导入*.google.com之外，还需要导入证书链上所有的CA证书（GeoTrust Global CA, Google Internet Authority G2）；</span>
</span><span class='line'><span class="c1">//如是自建证书的时候，可以设置为YES，增强安全性；假如是信任的CA所签发的证书，则建议关闭该验证；</span>
</span><span class='line'><span class="n">securityPolicy</span><span class="p">.</span><span class="n">validatesCertificateChain</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外需要知道的是，验证站点证书时通过域名的，如果服务器站点没有绑定域名，仅靠IP地址，上面的方法是不行的，解决的办法就是修改AFNetworking2的代码，在AFSecurityPolicy.m文件中，修改：<strong>- (BOOL)evaluateServerTrust:(SecTrustRef)serverTrust
                  forDomain:(NSString *)domain</strong>方法，将里面的部分校验代码注释掉：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//            SecTrustSetAnchorCertificates(serverTrust, (__bridge CFArrayRef)pinnedCertificates);</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//            if (!AFServerTrustIsValid(serverTrust)) {</span>
</span><span class='line'><span class="c1">//                return NO;</span>
</span><span class='line'><span class="c1">//            }</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//            if (!self.validatesCertificateChain) {</span>
</span><span class='line'><span class="c1">//                return YES;</span>
</span><span class='line'><span class="c1">//            }</span>
</span></code></pre></td></tr></table></div></figure>


<p>有了上面的了解，我们就可以去实践一下HTTPS的开发了。Enjoy it！</p>

<p>学习来源：</p>

<ol>
<li><a href="http://my.oschina.net/non6/blog/290175">iOS实用技巧 - AFNetworking2安全的使用自签证书访问HTTPS</a></li>
<li><a href="http://oncenote.com/2014/10/21/Security-1-HTTPS/">iOS安全系列之一：HTTPS</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html">SSL/TLS协议运行机制的概述</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html">图解SSL/TLS协议</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【IOS】Reveal利器之使用]]></title>
    <link href="http://codefunny.github.io/blog/2015/07/23/ios-reveal-apply/"/>
    <updated>2015-07-23T12:00:01+08:00</updated>
    <id>http://codefunny.github.io/blog/2015/07/23/ios-reveal-apply</id>
    <content type="html"><![CDATA[<p>网上有很多教程，我结合自己的经验，总结了一个方便地使用方法，在下面描述我的使用流程。</p>

<!-- more -->


<p>1.获得Reveal的framework，在Reveal中拿到Reveal.framework拷贝到一个目录，本地调试UI都引用这个目录的framework，不用copy到具体的工程中；</p>

<p>2.在工程中新建一个Tagets，命名位RevealTest区分一下，然后在Build Setting中的Other Linker Flags项添加-ObjC -framework Reveal两项；</p>

<p>3.别忘了在Linked Frameworks and Libraries中添加Reveal.framework进来。</p>

<p>4.接下来就是启动Reveal和工程了，注意要编译的是RevealTest目标，这样就不用担心对生产版本造成影响了。</p>

<p>附：比较方便的办法是copy一下TARGETS，然后添加上面的设置，不过copy一份targets发现identifier后面加了一个copy字样，可能会有一些警告之类的信息，可以到Build Setting中修改Product Name，去掉后面的copy字符即可。</p>

<p>展示一个我的项目的UI截图，</p>

<p><img src="http://codefunny.github.io/images/custom_images/zhiyue-reveal.jpg" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【IOS】只有RSA模和指数，如何完成加密]]></title>
    <link href="http://codefunny.github.io/blog/2015/07/04/ios-rsa/"/>
    <updated>2015-07-04T17:02:23+08:00</updated>
    <id>http://codefunny.github.io/blog/2015/07/04/ios-rsa</id>
    <content type="html"><![CDATA[<blockquote><p>最近在项目中遇到RSA的加密解密问题，如果采用一般证书的方式也就没有这篇文章了，情况是这样的，RSA公钥存在服务器，需要联机获取，可以获取到RSA密钥的模值、有效期、指数、算法标识、索引等信息，这些信息是ASCII码格式，这些信息如何利用IOS的加密API进行RSA运算就成了一个问题。这篇文章就是记述探索问题答案的过程，希望对遇到同样问题的同行有所帮助。</p></blockquote>

<!-- more -->


<h4>获取的RSA模和指数</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>modulus: ADDC2B26BBA0E8BC8D532444656E367FD28924B5CB992728B87AB7DF09BA4043259AA8DF42D53D75CBF671DC617053BA5260CEEB42386431C3C3837C02AF5D8C665FB42F2F0949445133AEACE2DDE00CD8562D65978A6E057A3F18A63B0086E83A9A16A77C5F459ECCFD41D9E58ACF890B22E49428E9ADD21DD1A483E46AD3C1
</span><span class='line'>exponent:
</span><span class='line'>010001</span></code></pre></td></tr></table></div></figure>


<p>这是ASCII格式的公钥，在网上查询了一下RSA公钥的格式，发现X.509 DER编码和X.509 PAM编码，其中DER编码是ASCII格式，PAM编码是Base64格式，且他们只放证书，不含私钥。根据模值，可以判断，我们采用的应该是DER编码。那么DER编码的格式，就要弄清楚一下了。</p>

<h4>X.509 DER编码格式</h4>

<p>网上有一篇文章<a href="http://m.blog.csdn.net/blog/lingruoshui/11473755">RSA公钥DER编码</a>根据这篇文章可以推断出我们的DER编码格式应该是这样的，</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>30818902818100ADDC2B26BBA0E8BC8D532444656E367FD28924B5CB992728B87AB7DF09BA4043259AA8DF42D53D75CBF671DC617053BA5260CEEB42386431C3C3837C02AF5D8C665FB42F2F0949445133AEACE2DDE00CD8562D65978A6E057A3F18A63B0086E83A9A16A77C5F459ECCFD41D9E58ACF890B22E49428E9ADD21DD1A483E46AD3C10203010001
</span><span class='line'>解析一下可以分成以下几个部分（大家可以了解以下TLV结构）：
</span><span class='line'>308189：30开始，81代表后面一个字节表示长度，89表示后面有137字节；
</span><span class='line'>028181：02开始，81同上，81表示modulus长度129，前面补了00；
</span><span class='line'>00ADDC2B26BBA0E8BC8D532444656E367FD28924B5CB992728B87AB7DF09BA4043259AA8DF42D53D75CBF671DC617053BA5260CEEB42386431C3C3837C02AF5D8C665FB42F2F0949445133AEACE2DDE00CD8562D65978A6E057A3F18A63B0086E83A9A16A77C5F459ECCFD41D9E58ACF890B22E49428E9ADD21DD1A483E46AD3C1：modulus
</span><span class='line'>0203010001：02开始，03表示后面三个字节，exponent值（010001）。</span></code></pre></td></tr></table></div></figure>


<h4>RSA在IOS中的常见用法</h4>

<p><a href="http://blog.iamzsx.me/show.html?id=155002">iOS下的RSA加密方法</a>这篇文章常见用法之一，使用公钥证书，利用系统方法最终获得<strong>SecKeyRef publicKey</strong>，但是我们现在遇到的问题就是没有证书，我尝试过利用上面组装的DER送给<strong>SecCertificateCreateWithData</strong>，但是结果是返回nil值，这说明，我们的格式还不是该方法的参数，那么该方法的参数是神马呢，我跟踪了一个公钥证书，打印NSData值，发现其编码格式如下（中间部分经过我的处理，方便大家观察）：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>308202e4 3082024d a0030201 02020900 b524e21a d8b61f68 300d0609 2a864886 f70d0101 05050030 818a310b 30090603 55040613 02434e31 11300f06 03550408 0c085368 616e6768 61693111 300f0603 5504070c 08536861 6e676861 69310e30 0c060355 040a0c05 42616979 69310e30 0c060355 040b0c05 42616979 69311030 0e060355 04030c07 596f726b 2e477531 23302106 092a8648 86f70d01 09011614 67797135 33313939 32304067 6d61696c 2e636f6d 301e170d 31313130 32363032 34353332 5a170d31 31313132 35303234 3533335a 30818a31 0b300906 03550406 1302434e 3111300f 06035504 080c0853 68616e67 68616931 11300f06 03550407 0c085368 616e6768 6169310e 300c0603 55040a0c 05426169 7969310e 300c0603 55040b0c 05426169 79693110 300e0603 5504030c 07596f72 6b2e4775 31233021 06092a86 4886f70d 01090116 14677971 35333139 39323040 676d6169 6c2e636f 6d30819f
</span><span class='line'>    300d0609 2a864886 f70d0101 010500
</span><span class='line'>    03 818d
</span><span class='line'>    0030 81890281 81
</span><span class='line'>    00addc 2b26bba0 e8bc8d53 2444656e 367fd289 24b5cb99 2728b87a b7df09ba 4043259a a8df42d5 3d75cbf6 71dc6170 53ba5260 ceeb4238 6431c3c3 837c02af 5d8c665f b42f2f09 49445133 aeace2dd e00cd856 2d65978a 6e057a3f 18a63b00 86e83a9a 16a77c5f 459eccfd 41d9e58a cf890b22 e49428e9 add21dd1 a483e46a d3c1
</span><span class='line'>    0203 010001
</span><span class='line'>    a3 50304e30 1d060355 1d0e0416 04148888 b8b699e8 44822fcc c1164e95 dd662e58 65ed301f 0603551d 23041830 16801488 88b8b699 e844822f ccc1164e 95dd662e 5865ed30 0c060355 1d130405 30030101 ff300d06 092a8648 86f70d01 01050500 03818100 1d0652cb 2ca15103 b3dbd0c6 4d03ccda fca41d22 75f23e15 aae5e3a3 999d6e59 c0fbb776 f4a6850f b245d87b 05ae7824 2caf472d 0971607e 7d980ee1 0a2b3516 d555b052 b8f83ac0 bccfb9ab 32f53a66 69a61a2c b2887a76 ba67ad1a 15647085 acddebe8 48b0a4cc 4c4c5a5a 39dd6e51 1b840b23 76983a40 cb0ababb 3dfa2ceb </span></code></pre></td></tr></table></div></figure>


<p>可以发现中间那部分就是我们前面的DER编码格式，但是前后那一大段是神马东西呢，这又困扰了我，这个问题先放一放。接下来，要介绍一个最关键的，实际上得益于该作者的成果，我才解决了这个问题，同时也大概知道了上面那一堆大概是神马东东。</p>

<h4>找到通往罗马的道路</h4>

<p>在互联网上搜寻了，找到一篇文章<a href="http://www.ideawu.com/blog/post/132.html">iOS Objective-C RSA encrypt with only public key and descrypt with PHP</a>,这篇文章我看过几次，我一开始认为，里面的公钥就是我上面产生公钥的Base64编码格式，所以，我进行了Base64编码，同时参照其模式，添加了&mdash;&ndash;BEGIN PUBLIC KEY&mdash;&ndash;和&mdash;&ndash;END PUBLIC KEY&mdash;&ndash;，但是依然返回nil，于是我将下面的字符进行Base64解码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDEChqe80lJLTTkJD3X3Lyd7Fj+
</span><span class='line'>zuOhDZkjuLNPog3YR20e5JcrdqI9IFzNbACY/GQVhbnbvBqYgyql8DfPCGXpn0+X
</span><span class='line'>NSxELIUw9Vh32QuhGNr3/TBpechrVeVpFPLwyaYNEk1CawgHCeQqf5uaqiaoBDOT
</span><span class='line'>qeox88Lc1ld7MsfggQIDAQAB</span></code></pre></td></tr></table></div></figure>


<p>得到的数据和DER很像，但是其前面多了一些数据，查看其github上的源码才知道前面还有ASN.1 public key header和PKCS #1 rsaEncryption szOID_RSA_RSA，这个部分解释了上面一长串数据的含义。一开始我忽略了作者这样做的意图，后来我跟踪了从证书中获取公钥，打印了一下SecKeyRef的值，得到下面的结果：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>&lt;SecKeyRef algorithm id: 1, key type: RSAPublicKey, version: 3, block size: 1024 bits, exponent: {hex: 10001, decimal: 65537}, modulus: ADDC2B26BBA0E8BC8D532444656E367FD28924B5CB992728B87AB7DF09BA4043259AA8DF42D53D75CBF671DC617053BA5260CEEB42386431C3C3837C02AF5D8C665FB42F2F0949445133AEACE2DDE00CD8562D65978A6E057A3F18A63B0086E83A9A16A77C5F459ECCFD41D9E58ACF890B22E49428E9ADD21DD1A483E46AD3C1, addr: 0x17c85800&gt;</span></code></pre></td></tr></table></div></figure>


<p>这一下子让我想到能不能自己create一个SecKeyRef，因为它的参数我都可以获取，有了这个想法，又经历了一番曲折，最终在阅读ideawu的源码时得到了答案。<a href="https://github.com/codefunny/IOS-RSA/tree/master">源码看这里</a>。剩下的就只有看代码了。</p>

<p>有看到有网友在网上发帖说尝试了很多方式，在IOS上没办法解决这个问题，看到这个我几乎要放弃了，但是最终还是幸运的解决了这个问题，有时候多一次回眸，可能结局就不一样，我们不缺少答案，只是要耐心的寻找。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS安全攻防学习笔记]]></title>
    <link href="http://codefunny.github.io/blog/2014/12/11/ios-safe/"/>
    <updated>2014-12-11T16:59:43+08:00</updated>
    <id>http://codefunny.github.io/blog/2014/12/11/ios-safe</id>
    <content type="html"><![CDATA[<p>前言</p>

<p>在CSDN上发现<a href="http://blog.csdn.net/column/details/hackingios.html?&amp;page=2">程序媛念茜的iOS安全攻防专栏</a>系列文章，在程序猿这个男性居多的行业里见到一女中豪杰，真是巾帼不让须眉，十分佩服念茜，这里就记录一下学习的笔记吧。感谢分享！</p>

<!-- more -->


<h4>工具和命令</h4>

<table>
<thead>
<tr>
<th style="text-align:left;"> ps </th>
<th style="text-align:left;"> 显示进程，cpu使用率，内存使用情况等 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> sysctl </td>
<td style="text-align:left;"> 检查设定Kernel配置 </td>
</tr>
<tr>
<td style="text-align:left;">netstat</td>
<td style="text-align:left;">显示网络连接，路由表，接口状态等</td>
</tr>
<tr>
<td style="text-align:left;">route</td>
<td style="text-align:left;">路由</td>
</tr>
<tr>
<td style="text-align:left;">renice</td>
<td style="text-align:left;">调整程序运行优先级</td>
</tr>
<tr>
<td style="text-align:left;">ifconfig</td>
<td style="text-align:left;">查看网络配置</td>
</tr>
<tr>
<td style="text-align:left;">tcpdump</td>
<td style="text-align:left;">截获分析网络数据包</td>
</tr>
<tr>
<td style="text-align:left;">lsof</td>
<td style="text-align:left;">列出当前系统打开的文件列表</td>
</tr>
<tr>
<td style="text-align:left;">otool</td>
<td style="text-align:left;">查看程序依赖的动态库信息，反编代码段。。。</td>
</tr>
<tr>
<td style="text-align:left;">nm</td>
<td style="text-align:left;">显示符号表</td>
</tr>
<tr>
<td style="text-align:left;">ldid</td>
<td style="text-align:left;">签名工具</td>
</tr>
</tbody>
</table>


<p><code>otool -L exe</code> : 显示可执行程序连接了哪些库<br>
<code>otool -tV exe</code>: 反编译exe的<strong>TEXT</strong>段内容<br>
<code>nm -g exe</code>: 显示程序符号表</p>

<h4>阻止GDB依附</h4>

<p>常规的办法是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;sys/ptrace.h&gt;  </span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="n">charchar</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="cp">#ifndef DEBUG  </span>
</span><span class='line'>    <span class="n">ptrace</span><span class="p">(</span><span class="n">PT_DENY_ATTACH</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif  </span>
</span><span class='line'>    <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">UIApplicationMain</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="nb">nil</span><span class="p">,</span> <span class="n">NSStringFromClass</span><span class="p">([</span><span class="n">WQMainPageAppDelegate</span> <span class="k">class</span><span class="p">]));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是iPhone真实环境没有sys/ptrace.h的，但是可以通过dlopen拿到它。</p>

<p>dlopen：当path参数为0时，他会自动查找$LD_LIBRARY_PATH,$DYLD_LIBRARY_PATH,$DYLD_FALLBACK_LIBRARY_PATH和当前工作目录中的动态链接库。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;dlfcn.h&gt;  </span>
</span><span class='line'><span class="cp">#import &lt;sys/types.h&gt;  </span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="nf">int</span> <span class="p">(</span><span class="o">*</span><span class="kt">ptrace_ptr_t</span><span class="p">)(</span><span class="kt">int</span> <span class="n">_request</span><span class="p">,</span> <span class="kt">pid_t</span> <span class="n">_pid</span><span class="p">,</span> <span class="kt">caddr_t</span> <span class="n">_addr</span><span class="p">,</span> <span class="kt">int</span> <span class="n">_data</span><span class="p">);</span>
</span><span class='line'><span class="cp">#if !defined(PT_DENY_ATTACH)  </span>
</span><span class='line'><span class="cp">#define PT_DENY_ATTACH 31  </span>
</span><span class='line'><span class="cp">#endif  </span><span class="c1">// !defined(PT_DENY_ATTACH)  </span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">disable_gdb</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">void</span><span class="o">*</span> <span class="n">handle</span> <span class="o">=</span> <span class="n">dlopen</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">RTLD_GLOBAL</span> <span class="o">|</span> <span class="n">RTLD_NOW</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">ptrace_ptr_t</span> <span class="n">ptrace_ptr</span> <span class="o">=</span> <span class="n">dlsym</span><span class="p">(</span><span class="n">handle</span><span class="p">,</span> <span class="s">&quot;ptrace&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">ptrace_ptr</span><span class="p">(</span><span class="n">PT_DENY_ATTACH</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">dlclose</span><span class="p">(</span><span class="n">handle</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="n">charchar</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="cp">#ifndef DEBUG  </span>
</span><span class='line'>    <span class="n">disable_gdb</span><span class="p">();</span>
</span><span class='line'><span class="cp">#endif  </span>
</span><span class='line'>    <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">UIApplicationMain</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="nb">nil</span><span class="p">,</span> <span class="n">NSStringFromClass</span><span class="p">([</span><span class="n">WQMainPageAppDelegate</span> <span class="k">class</span><span class="p">]));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>上述方法经过校验可行，但是不知道放在正式版app中是否会被apple驳回。</strong></p>

<h4>二进制和资源文件自检</h4>

<p>hackers们破解app，一般动2个地方，一个是二进制，一个是资源文件。二进制都重新编译了，当然是盗版，但修改资源文件是不需要重新编译二进制文件。</p>

<p>那么，我们有必要在敏感的请求报文中，增加正版应用的二进制和资源文件的标识，让服务器知道，此请求是否来自正版未经修改的app。在沙盒中，读到自己程序的二进制，也可读到资源文件签名文件，对其取md5值然后以某种组合算法得到一个标记字符串，然后发给服务器。</p>

<p>下面是念茜封装的读取文件地址代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@implementation</span> <span class="nc">WQPathUtilities</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">directory:</span><span class="p">(</span><span class="n">NSSearchPathDirectory</span><span class="p">)</span><span class="nv">dir</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">paths</span> <span class="o">=</span> <span class="n">NSSearchPathForDirectoriesInDomains</span><span class="p">(</span><span class="n">dir</span><span class="p">,</span> <span class="n">NSUserDomainMask</span><span class="p">,</span> <span class="nb">YES</span><span class="p">);</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">dirStr</span> <span class="o">=</span> <span class="p">[</span><span class="n">paths</span> <span class="nl">objectAtIndex</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">dirStr</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">documentsDirectory</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">WQPathUtilities</span> <span class="nl">directory</span><span class="p">:</span><span class="n">NSDocumentDirectory</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">cachesDirectory</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">WQPathUtilities</span> <span class="nl">directory</span><span class="p">:</span><span class="n">NSCachesDirectory</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">tmpDirectory</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">NSTemporaryDirectory</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">homeDirectory</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">NSHomeDirectory</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">codeResourcesPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">excutableName</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="n">infoDictionary</span><span class="p">][</span><span class="s">@&quot;CFBundleExecutable&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">tmpPath</span> <span class="o">=</span> <span class="p">[[</span><span class="n">WQPathUtilities</span> <span class="n">documentsDirectory</span><span class="p">]</span> <span class="n">stringByDeletingLastPathComponent</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">appPath</span> <span class="o">=</span> <span class="p">[[</span><span class="n">tmpPath</span> <span class="nl">stringByAppendingPathComponent</span><span class="p">:</span><span class="n">excutableName</span><span class="p">]</span>
</span><span class='line'>                         <span class="nl">stringByAppendingPathExtension</span><span class="p">:</span><span class="s">@&quot;app&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">sigPath</span> <span class="o">=</span> <span class="p">[[</span><span class="n">appPath</span> <span class="nl">stringByAppendingPathComponent</span><span class="p">:</span><span class="s">@&quot;_CodeSignature&quot;</span><span class="p">]</span>
</span><span class='line'>                         <span class="nl">stringByAppendingPathComponent</span><span class="p">:</span><span class="s">@&quot;CodeResources&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sigPath</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">binaryPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">excutableName</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="n">infoDictionary</span><span class="p">][</span><span class="s">@&quot;CFBundleExecutable&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">tmpPath</span> <span class="o">=</span> <span class="p">[[</span><span class="n">WQPathUtilities</span> <span class="n">documentsDirectory</span><span class="p">]</span> <span class="n">stringByDeletingLastPathComponent</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">appPath</span> <span class="o">=</span> <span class="p">[[</span><span class="n">tmpPath</span> <span class="nl">stringByAppendingPathComponent</span><span class="p">:</span><span class="n">excutableName</span><span class="p">]</span>
</span><span class='line'>                         <span class="nl">stringByAppendingPathExtension</span><span class="p">:</span><span class="s">@&quot;app&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">binaryPath</span> <span class="o">=</span> <span class="p">[</span><span class="n">appPath</span> <span class="nl">stringByAppendingPathComponent</span><span class="p">:</span><span class="n">excutableName</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">binaryPath</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>md5方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;CommonCrypto/CommonDigest.h&quot;  </span>
</span><span class='line'>
</span><span class='line'><span class="p">+(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">md5WithString:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">string</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">charchar</span> <span class="o">*</span><span class="n">cStr</span> <span class="o">=</span> <span class="p">[</span><span class="n">string</span> <span class="n">UTF8String</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">result</span><span class="p">[</span><span class="n">CC_MD5_DIGEST_LENGTH</span><span class="p">];</span>
</span><span class='line'>    <span class="n">CC_MD5</span><span class="p">(</span><span class="n">cStr</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">cStr</span><span class="p">),</span> <span class="n">result</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="n">result</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">result</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">result</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">result</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span>
</span><span class='line'>             <span class="n">result</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span> <span class="n">result</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span> <span class="n">result</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span> <span class="n">result</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span>
</span><span class='line'>             <span class="n">result</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span> <span class="n">result</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span> <span class="n">result</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span> <span class="n">result</span><span class="p">[</span><span class="mi">11</span><span class="p">],</span>
</span><span class='line'>             <span class="n">result</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span> <span class="n">result</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span> <span class="n">result</span><span class="p">[</span><span class="mi">14</span><span class="p">],</span> <span class="n">result</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span>
</span><span class='line'>             <span class="p">]</span> <span class="n">lowercaseString</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>static和被裁的符号表</h4>

<p>原理：</p>

<p>如果函数属性为static，那么编译时该函数符号就会被解析为local符号。在发布release程序时（xcode打包编译二进制）默认会strip裁掉这些函数符号，加大破解难度。</p>

<p>局限：static函数，只在本文件可见。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="kt">id</span> <span class="nf">static_createBtn</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">UIButton</span> <span class="o">*</span><span class="n">btn</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIButton</span> <span class="n">alloc</span><span class="p">]</span><span class="nl">initWithFrame</span><span class="p">:</span><span class="n">CGRectZero</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">btn</span> <span class="nl">setFrame</span><span class="p">:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">)];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">btn</span> <span class="nl">setBackgroundColor</span><span class="p">:[</span><span class="bp">UIColor</span> <span class="n">blueColor</span><span class="p">]];</span>
</span><span class='line'>    <span class="n">btn</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">cornerRadius</span> <span class="o">=</span> <span class="mf">7.0f</span><span class="p">;</span>
</span><span class='line'>    <span class="n">btn</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">masksToBounds</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">btn</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>方法名混淆</h4>

<p>常规思路：</p>

<ul>
<li>花代码花指令，即随意往程序中加入迷惑人的代码指令</li>
<li>易读字符替换</li>
</ul>


<p>念茜写了一个混淆工具，主要思路是把敏感方法名集中写在一个名叫func.list的文件中，逐一#define成随机字符，追加写入.h</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#!/usr/bin/env bash  </span>
</span><span class='line'>
</span><span class='line'><span class="n">TABLENAME</span><span class="o">=</span><span class="n">symbols</span>
</span><span class='line'><span class="n">SYMBOL_DB_FILE</span><span class="o">=</span><span class="s">&quot;symbols&quot;</span>
</span><span class='line'><span class="n">STRING_SYMBOL_FILE</span><span class="o">=</span><span class="s">&quot;func.list&quot;</span>
</span><span class='line'><span class="n">HEAD_FILE</span><span class="o">=</span><span class="s">&quot;$PROJECT_DIR/$PROJECT_NAME/codeObfuscation.h&quot;</span>
</span><span class='line'><span class="n">export</span> <span class="n">LC_CTYPE</span><span class="o">=</span><span class="n">C</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#维护数据库方便日后作排重  </span>
</span><span class='line'><span class="n">createTable</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">echo</span> <span class="s">&quot;create table $TABLENAME(src text, des text);&quot;</span> <span class="o">|</span> <span class="n">sqlite3</span> <span class="err">$</span><span class="n">SYMBOL_DB_FILE</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">insertValue</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">echo</span> <span class="s">&quot;insert into $TABLENAME values(&#39;$1&#39; ,&#39;$2&#39;);&quot;</span> <span class="o">|</span> <span class="n">sqlite3</span> <span class="err">$</span><span class="n">SYMBOL_DB_FILE</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">query</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">echo</span> <span class="s">&quot;select * from $TABLENAME where src=&#39;$1&#39;;&quot;</span> <span class="o">|</span> <span class="n">sqlite3</span> <span class="err">$</span><span class="n">SYMBOL_DB_FILE</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">ramdomString</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">openssl</span> <span class="n">rand</span> <span class="o">-</span><span class="n">base64</span> <span class="mi">64</span> <span class="o">|</span> <span class="n">tr</span> <span class="o">-</span><span class="n">cd</span> <span class="err">&#39;</span><span class="n">a</span><span class="o">-</span><span class="n">zA</span><span class="o">-</span><span class="n">Z</span><span class="err">&#39;</span> <span class="o">|</span><span class="n">head</span> <span class="o">-</span><span class="n">c</span> <span class="mi">16</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">rm</span> <span class="o">-</span><span class="n">f</span> <span class="err">$</span><span class="n">SYMBOL_DB_FILE</span>
</span><span class='line'><span class="n">rm</span> <span class="o">-</span><span class="n">f</span> <span class="err">$</span><span class="n">HEAD_FILE</span>
</span><span class='line'><span class="n">createTable</span>
</span><span class='line'>
</span><span class='line'><span class="n">touch</span> <span class="err">$</span><span class="n">HEAD_FILE</span>
</span><span class='line'><span class="n">echo</span> <span class="err">&#39;#</span><span class="n">ifndef</span> <span class="n">Demo_codeObfuscation_h</span>
</span><span class='line'><span class="cp">#define Demo_codeObfuscation_h&#39; &gt;&gt; $HEAD_FILE  </span>
</span><span class='line'><span class="n">echo</span> <span class="s">&quot;//confuse string at `date`&quot;</span> <span class="o">&gt;&gt;</span> <span class="err">$</span><span class="n">HEAD_FILE</span>
</span><span class='line'><span class="n">cat</span> <span class="s">&quot;$STRING_SYMBOL_FILE&quot;</span> <span class="o">|</span> <span class="k">while</span> <span class="n">read</span> <span class="o">-</span><span class="n">ra</span> <span class="n">line</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">[[</span> <span class="o">!</span> <span class="o">-</span><span class="n">z</span> <span class="s">&quot;$line&quot;</span> <span class="p">]];</span> <span class="n">then</span>
</span><span class='line'>        <span class="n">ramdom</span><span class="o">=</span><span class="err">`</span><span class="n">ramdomString</span><span class="err">`</span>
</span><span class='line'>        <span class="n">echo</span> <span class="err">$</span><span class="n">line</span> <span class="err">$</span><span class="n">ramdom</span>
</span><span class='line'>        <span class="n">insertValue</span> <span class="err">$</span><span class="n">line</span> <span class="err">$</span><span class="n">ramdom</span>
</span><span class='line'>        <span class="n">echo</span> <span class="s">&quot;#define $line $ramdom&quot;</span> <span class="o">&gt;&gt;</span> <span class="err">$</span><span class="n">HEAD_FILE</span>
</span><span class='line'>    <span class="n">fi</span>
</span><span class='line'><span class="n">done</span>
</span><span class='line'><span class="n">echo</span> <span class="s">&quot;#endif&quot;</span> <span class="o">&gt;&gt;</span> <span class="err">$</span><span class="n">HEAD_FILE</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">sqlite3</span> <span class="err">$</span><span class="n">SYMBOL_DB_FILE</span> <span class="p">.</span><span class="n">dump</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://blog.csdn.net/yxh265/article/details/38438959">这里</a>有人用c写了一个获取m中方法的程序。</p>

<h4>敏感代码保护</h4>

<p>Object-C代码容易被hook，暴露信息太多，为了安全，改用C来写敏感的业务逻辑吧。</p>

<p>示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//XXUtil.h  </span>
</span><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;  </span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_util</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="p">(</span><span class="o">*</span><span class="n">isVerified</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="p">(</span><span class="o">*</span><span class="n">isNeedSomething</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">resetPassword</span><span class="p">)(</span><span class="bp">NSString</span> <span class="o">*</span><span class="n">password</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="n">XXUtil_t</span> <span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define XXUtil ([_XXUtil sharedUtil])  </span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">_XXUtil</span> : <span class="bp">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="n">XXUtil_t</span> <span class="o">*</span><span class="p">)</span><span class="nf">sharedUtil</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//XXUtil.m  </span>
</span><span class='line'><span class="cp">#import &quot;XXUtil.h&quot;  </span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">BOOL</span> <span class="n">_isVerified</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//bala bala ...  </span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">BOOL</span> <span class="n">_isNeedSomething</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//bala bala ...  </span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">_resetPassword</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="n">password</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//bala bala ...  </span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">XXUtil_t</span> <span class="o">*</span> <span class="n">util</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">_XXUtil</span>
</span><span class='line'>
</span><span class='line'><span class="p">+(</span><span class="n">XXUtil_t</span> <span class="o">*</span><span class="p">)</span><span class="nf">sharedUtil</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">util</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">XXUtil_t</span><span class="p">));</span>
</span><span class='line'>        <span class="n">util</span><span class="o">-&gt;</span><span class="n">isVerified</span> <span class="o">=</span> <span class="n">_isVerified</span><span class="p">;</span>
</span><span class='line'>        <span class="n">util</span><span class="o">-&gt;</span><span class="n">isNeedSomething</span> <span class="o">=</span> <span class="n">_isNeedSomething</span><span class="p">;</span>
</span><span class='line'>        <span class="n">util</span><span class="o">-&gt;</span><span class="n">resetPassword</span> <span class="o">=</span> <span class="n">_resetPassword</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">util</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">destroy</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">util</span> <span class="o">?</span> <span class="n">free</span><span class="p">(</span><span class="n">util</span><span class="p">)</span><span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">util</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4>判断设备是否越狱</h4>

<p><a href="http://blog.csdn.net/sakulafly/article/details/21159257">直接看原文吧</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NFC技术在M1卡中的运用学习]]></title>
    <link href="http://codefunny.github.io/blog/2014/12/08/android-nfc/"/>
    <updated>2014-12-08T15:19:56+08:00</updated>
    <id>http://codefunny.github.io/blog/2014/12/08/android-nfc</id>
    <content type="html"><![CDATA[<p><img src="http://codefunny.github.io/images/custom_images/nfc-800.jpg" alt="image" /></p>

<!--more-->


<h4>NFC技术介绍</h4>

<p>NFC（Near Field Communication），一种近场无线通信技术。通讯距离通常为4cm以内，工作频率13.56MHz，通信速率106kbit/s到848kbit/s。</p>

<p>NFC通信由一个发起者（initiator）和一个接受者（target）组成。其工作原理和收音机类似。NFC也支持点到点的通信（peer to peer）。</p>

<p>在刚刚推出的iphone6也支持NFC功能，但是apple目前限制在Apple Pay上的运用，所以距离开发者使用还有一段距离。</p>

<p>在Android NFC应用中，Android手机通常可作为发起者，也可作为NFC读写器。从Android 2.3.3起支持p2p通信。</p>

<p>Android的SDK中，有android.nfc和android.nfc.tech两个包支持NFC技术。</p>

<p>android.nfc包中主要类如下：</p>

<ul>
<li>NfcManager用来管理Android设备中指出的所有NFC Adapter，大多Android设备只支持一个NFC Adapter，所以可以使用getDefaultAdapter获取系统支持的Adapter。</li>
<li>NfcAdapter为NFC Adapter对象，可以用来定义一个Intent使系统在检测到NFC Tag时通知你定义的Activity，并提供用来注册forground tag消息发送的方法等；</li>
<li>NdefMessage和NdefRecord NDEF为NFC forum定义的数据格式；</li>
<li>Tag代表一个Tag对象，如一个标签、卡片等。当Android设备检测到一个Tag时，会创建一个Tag对象，将其放在Intent对象，然后发送到相应地Activity中。</li>
</ul>


<p>android.nfc.tech中定义了可以对Tag进行的读写操作的类，可以分为NfcA、NfcB、NfcF和MifareClassic等。</p>

<p>[来源]
<a href="http://blog.csdn.net/mapdigit/article/details/7567096">Android NFC 开发教程(1):概述</a></p>

<h4>NFC在Android上的开发</h4>

<p>在Android manifest文件中申明和NFC相关的权限和功能选项：</p>

<p><strong>权限申明</strong></p>

<p><uses-permission android:name="android.permission.NFC" /></p>

<p><em>由于NFC是在Android 2.3（Level 10）才开始支持的，所以有版本限制</em></p>

<p><uses-sdk android:minSdkVersion="10" /></p>

<p><em>同样,需要硬件支持NFC功能</em></p>

<p><uses-feature android:name="android.hardware.nfc" android:required="true" /></p>

<p>为Activity申明它支持处理NFC Tag，下面是示例：</p>

<pre><code>&lt;activity android:name=”.NFCDemoActivity”
android:label=”@string/app_name”
android:launchMode=”singleTop”&gt;
&lt;intent-filter&gt;
&lt; action android:name=”android.intent.action.MAIN” /&gt;
&lt;category android:name=”android.intent.category.LAUNCHER” /&gt;
&lt; /intent-filter&gt;

&lt; intent-filter&gt;
&lt; action android:name=”android.nfc.action.NDEF_DISCOVERED”/&gt;
&lt;data android:mimeType=”text/plain” /&gt;
&lt; /intent-filter&gt;

&lt; intent-filter&gt;
&lt; action
android:name=”android.nfc.action.TAG_DISCOVERED” /&gt;
&lt; category
android:name=”android.intent.category.DEFAULT”&gt;
&lt; /category&gt;
&lt; /intent-filter&gt;

&lt; !– Add a technology filter –&gt;
&lt;intent-filter&gt;
&lt; action android:name=”android.nfc.action.TECH_DISCOVERED” /&gt;
&lt; /intent-filter&gt;
&lt;meta-data android:name=”android.nfc.action.TECH_DISCOVERED”
android:resource=”@xml/filter_nfc”
/&gt;
&lt;/activity&gt;
</code></pre>

<p>上面的filter_nfc是一个xml的文件，指明了支持处理的NFC Tag类型，filter_nfc.xml格式示例如下：</p>

<pre><code>&lt;resources xmlns:xliff=”urn:oasis:names:tc:xliff:document:1.2″&gt;
&lt; !– capture anything using NfcF –&gt;
&lt;tech-list&gt;
&lt; tech&gt;android.nfc.tech.NfcA&lt;/tech&gt;
&lt; tech&gt;android.nfc.tech.MifareClassic&lt;/tech&gt;
&lt; tech&gt;android.nfc.tech.MifareUltralight&lt;/tech&gt;
&lt;/tech-list&gt;
&lt;/resources&gt;
</code></pre>

<p>三种Activity NDEF_DISCOVERED、TECH_DISCOVERED、TAG_DISCOVERED的先后顺序很重要，Android设备会根据申明的顺序给对应的Activity发送含NFC消息的Intent。</p>

<p><strong>Android NFC 消息发送机制</strong></p>

<p><em>Android支持下面两种机制：Intent发送机制和前台Activity消息发送机制</em></p>

<ol>
<li><p>所谓Intent发送机制：当系统检测到Tag时，Android系统提供manifest中定义的Intent filter来选择合适的Activity来处理Tag，当有多个Activity可以处理时，会弹出Activity选择窗口由用户选择。</p></li>
<li><p>前台Activity消息发送机制：允许一个在前台运行的Activity在读写NFC Tag时具有优先权，就是说前台运行的Activity可以处理该Tag时，就直接发送给这个Activity处理该Tag。</p></li>
</ol>


<p>下图显示了Android检测到Tag，消息发送的优先级</p>

<p><img src="http://codefunny.github.io/images/custom_images/nfc-Dispatch-process.png" alt="image" /></p>

<p>对于Intent发送机制只需在manifest中说明即可，而对前台机制还需要通过代码申明。</p>

<pre><code>public class NFCDemoActivity extends Activity {  
 private NfcAdapter mAdapter;  
 private PendingIntent mPendingIntent;  
 private IntentFilter[] mFilters;  
 private String[][] mTechLists;  
 private TextView mText;  
 private int mCount = 0;  

 @Override  
 public void onCreate(Bundle savedState) {  
 super.onCreate(savedState);  

 setContentView(R.layout.foreground_dispatch);  
 mText = (TextView) findViewById(R.id.text);  
 mText.setText("Scan a tag");  

 mAdapter = NfcAdapter.getDefaultAdapter(this);  

 // Create a generic PendingIntent that will be deliver  
 // to this activity. The NFC stack  
 // will fill in the intent with the details of the  
 //discovered tag before delivering to  
 // this activity.  
 mPendingIntent = PendingIntent.getActivity(this, 0,  
 new Intent(this,  
    getClass()).addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP), 0);  

 // Setup an intent filter for all MIME based dispatches  
 IntentFilter ndef  
    = new IntentFilter(NfcAdapter.ACTION_TECH_DISCOVERED);  
 try {  
 ndef.addDataType("*/*");  
 } catch (MalformedMimeTypeException e) {  
 throw new RuntimeException("fail", e);  
 }  
 mFilters = new IntentFilter[] {  
 ndef,  
 };  

 // Setup a tech list for all MifareClassic tags  
 mTechLists  
  = new String[][] { new String[] { MifareClassic.class.getName() } };  
 }  

 @Override  
 public void onResume() {  
 super.onResume();  
 mAdapter.enableForegroundDispatch(this,  
     mPendingIntent, mFilters, mTechLists);  
 }  

 @Override  
 public void onNewIntent(Intent intent) {  
 Log.i("Foreground dispatch",  
     "Discovered tag with intent: " + intent);  
 mText.setText("Discovered tag " +  
       ++mCount + " with intent: " + intent);  
 }  

 @Override  
 public void onPause() {  
 super.onPause();  
 mAdapter.disableForegroundDispatch(this);  
 }  
}  
</code></pre>

<p><strong>上面的代码只对mafiare one卡可用，另外由于M1卡的专利属于恩智浦公司，所以只有恩智浦生产的nfc芯片才支持对M1卡的读写，非恩智浦公司的nfc芯片则不支持M1卡，小米3使用的NFC芯片不支持M1卡。</strong></p>

<p>[来源]
<a href="http://blog.csdn.net/mapdigit/article/details/7571027">Android NFC 开发教程(2): ApiDemos->NFC->ForegoundDispatch</a></p>

<h4>M1卡结构及读写</h4>

<p>Mifare Tag有1K、2K和4K几种容量。其内存分布如下：</p>

<p><img src="http://codefunny.github.io/images/custom_images/mafiareone.png" alt="image" /></p>

<p>M1卡每扇区的第三块为控制块，有keyA和keyB进行鉴权。缺省的key值一般为全FF或全00，由MifareClassic.KEY_DEFAULT定义。</p>

<p>下面代码示范了在<code>public void onNewIntent(Intent intent)</code>中的主要操作</p>

<pre><code>// 1) Parse the intent and get the action that triggered this intent  
String action = intent.getAction();  
// 2) Check if it was triggered by a tag discovered interruption.  
if (NfcAdapter.ACTION_TECH_DISCOVERED.equals(action)) {  
 // 3) Get an instance of the TAG from the NfcAdapter  
 Tag tagFromIntent = intent.getParcelableExtra(NfcAdapter.EXTRA_TAG);  
 // 4) Get an instance of the Mifare classic card from this TAG  
 // intent  
 MifareClassic mfc = MifareClassic.get(tagFromIntent);  
 MifareClassCard mifareClassCard=null;  

 try { // 5.1) Connect to card  
 mfc.connect();  
 boolean auth = false;  
 // 5.2) and get the number of sectors this card has..and loop  
 // thru these sectors  
 int secCount = mfc.getSectorCount();  
 mifareClassCard= new MifareClassCard(secCount);  
 int bCount = 0;  
 int bIndex = 0;  
 for (int j = 0; j &lt; secCount; j++) {  
 MifareSector mifareSector = new MifareSector();  
 mifareSector.sectorIndex = j;  
 // 6.1) authenticate the sector  
 auth = mfc.authenticateSectorWithKeyA(j,  
 MifareClassic.KEY_DEFAULT);  
 mifareSector.authorized = auth;  
 if (auth) {  
 // 6.2) In each sector - get the block count  
 bCount = mfc.getBlockCountInSector(j);  
 bCount =Math.min(bCount, MifareSector.BLOCKCOUNT);  
 bIndex = mfc.sectorToBlock(j);  
 for (int i = 0; i &lt; bCount; i++) {  

 // 6.3) Read the block  
 byte []data = mfc.readBlock(bIndex);  
 MifareBlock mifareBlock = new MifareBlock(data);  
 mifareBlock.blockIndex = bIndex;  
 // 7) Convert the data into a string from Hex  
 // format.  

 bIndex++;  
 mifareSector.blocks[i] = mifareBlock;  

 }  
 mifareClassCard.setSector(mifareSector.sectorIndex,  
 mifareSector);  
 } else { // Authentication failed - Handle it  

 }  
 }  
 ArrayList&lt;String&gt; blockData=new ArrayList&lt;String&gt;();  
 int blockIndex=0;  
 for(int i=0;i&lt;secCount;i++){  

 MifareSector mifareSector=mifareClassCard.getSector(i);  
 for(int j=0;j&lt;MifareSector.BLOCKCOUNT;j++){  
 MifareBlock mifareBlock=mifareSector.blocks[j];  
 byte []data=mifareBlock.getData();  
 blockData.add("Block "+ blockIndex++ +" : "+  
 Converter.getHexString(data, data.length));  
 }  
 }  
 String []contents=new String[blockData.size()];  
 blockData.toArray(contents);  
 setListAdapter(new ArrayAdapter&lt;String&gt;(this,  
 android.R.layout.simple_list_item_1, contents));  
 getListView().setTextFilterEnabled(true);  

 } catch (IOException e) {  
 Log.e(TAG, e.getLocalizedMessage());  
 showAlert(3);  
 }finally{  

 if(mifareClassCard!=null){  
 mifareClassCard.debugPrint();  
 }  
 }  
}// End of method  
</code></pre>

<p>[来源]<br>
<a href="http://blog.csdn.net/mapdigit/article/details/7574836">Android NFC 开发教程(3): Mifare Tag 读写示例</a></p>

<p>[额外阅读]<br>
<a href="http://blog.csdn.net/mapdigit/article/details/7582867">Android NFC 门票系统手机端程序简介</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IC卡交易中MAC的计算方式]]></title>
    <link href="http://codefunny.github.io/blog/2014/12/04/ic-card-encrypt/"/>
    <updated>2014-12-04T17:08:24+08:00</updated>
    <id>http://codefunny.github.io/blog/2014/12/04/ic-card-encrypt</id>
    <content type="html"><![CDATA[<p><img src="http://codefunny.github.io/images/custom_images/yinlian-800.jpg" alt="image" /></p>

<!-- more -->


<h2>报文鉴别码（MAC）的计算方法</h2>

<h4>1.基于分组算法的MAC</h4>

<p>依照ISO/IEC 9797-1规范，使用密钥长度为128位的对称加密算法采用CBC模式对任意长度的报文计算8字节MAC值。（就是采用3DES的CBC模式）</p>

<center>MAC算法参数说明</center>


<table>
<thead>
<tr>
<th style="text-align:center;">   M       </th>
<th style="text-align:center;"> 明文消息  </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">   C       </td>
<td style="text-align:center;">  密文消息   </td>
</tr>
<tr>
<td style="text-align:center;">   Mac     </td>
<td style="text-align:center;">  消息认证码   </td>
</tr>
<tr>
<td style="text-align:center;">   K       </td>
<td style="text-align:center;">MAC密钥</td>
</tr>
<tr>
<td style="text-align:center;">   IV      </td>
<td style="text-align:center;">初始向量</td>
</tr>
<tr>
<td style="text-align:center;">   Ek(M)   </td>
<td style="text-align:center;">使用密钥K对M进行加密</td>
</tr>
<tr>
<td style="text-align:center;">   Dk&copy;   </td>
<td style="text-align:center;">使用密钥K对C进行解密</td>
</tr>
</tbody>
</table>


<p>算法说明：</p>

<ol>
<li>在明文M后附加0x80,然后在右端填充最少的0x00，使得填充后消息M = (M||80||00||00||&hellip;||00)的长度为8的整数倍。然后将M分为8字节(文档上是16字节，但我认为是不正确的)的块M1，M2，M3，&hellip;，Mn；</li>
<li>将密钥K分为8字节的两部分KL和KR，初始向量IV = (00||00||00||00||00||00||00||00)；</li>
<li>计算过程如下，C0 = IV， Ci = Ekl(Mi ^ Ci-1) i=1,2,&hellip;,n</li>
<li>最后一块数据再作如下计算Mac = Ekl(Dkr(Cn))</li>
</ol>


<p>对上面3，4步骤说明如下，Mi异或C(i-1)，结果采用KL进行DES加密处理，以此循环，得到最后的Cn，采用KR对Cn进行DES解密处理，然后再采用KL进行DES加密处理，得到的结果就是8字节的MAC值。</p>

<h4>2.基于SM4的MAC</h4>

<p>SM4和上面类似，不过其采用的是SM4算法，采用密钥长度为128位的对称加密算法采用CBC模式对任意长度的报文计算16字节MAC值。</p>

<center>MAC算法参数说明</center>


<table>
<thead>
<tr>
<th style="text-align:center;">   M       </th>
<th style="text-align:center;"> 明文消息  </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">   C       </td>
<td style="text-align:center;">  密文消息   </td>
</tr>
<tr>
<td style="text-align:center;">   Mac     </td>
<td style="text-align:center;">  消息认证码   </td>
</tr>
<tr>
<td style="text-align:center;">   K       </td>
<td style="text-align:center;">MAC密钥</td>
</tr>
<tr>
<td style="text-align:center;">   IV      </td>
<td style="text-align:center;">初始向量</td>
</tr>
<tr>
<td style="text-align:center;">   Ek(M)   </td>
<td style="text-align:center;">使用密钥K对M进行加密</td>
</tr>
<tr>
<td style="text-align:center;">   Dk&copy;   </td>
<td style="text-align:center;">使用密钥K对C进行解密</td>
</tr>
</tbody>
</table>


<p>其算法作下说明：</p>

<ol>
<li>在明文M后附加0x80,然后在右端填充最少的0x00，使得填充后消息M = (M||80||00||00||&hellip;||00)的长度为<strong>16的整数倍</strong>。然后将M分为16字节的块M1，M2，M3，&hellip;，Mn；</li>
<li>初始向量IV = (00||00||00||00||00||00||00||00||00||00||00||00||00||00||00||00)；</li>
<li>计算过程如下，C0 = IV， Ci = Ek(Mi ^ Ci-1) i=1,2,&hellip;,n</li>
<li>取最后一块左8字节作为MAC：Mac = LEFT(Cn)</li>
</ol>


<h4>3.基于HASH算法的HMAC</h4>

<p>HMAC算法依照FIPS规范，使用摘要算法生成HMAC</p>

<center>HMAC算法参数说明</center>


<table>
<thead>
<tr>
<th style="text-align:center;">   ipad        </th>
<th style="text-align:center;"> 填充字符串，内容为：8位字节0x36 重复64次  </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">   opad        </td>
<td style="text-align:center;">  填充字符串，内容为：8位字节0x5c,重复64次   </td>
</tr>
<tr>
<td style="text-align:center;">   text        </td>
<td style="text-align:center;">  所输入的需要计算MAC的数据，不包括填充字符串 </td>
</tr>
<tr>
<td style="text-align:center;">   K       </td>
<td style="text-align:center;">MAC密钥</td>
</tr>
<tr>
<td style="text-align:center;">   t       </td>
<td style="text-align:center;">所得MAC的字节长度</td>
</tr>
<tr>
<td style="text-align:center;">   Hash安全哈希算法  </td>
<td style="text-align:center;">使用密钥K对M进行加密</td>
</tr>
<tr>
<td style="text-align:center;">   Dk&copy;   </td>
<td style="text-align:center;">使用密钥K对C进行解密</td>
</tr>
</tbody>
</table>


<p>其计算公式如下：</p>

<p>MAC(text)t = HAMC(K,text)t = Hash((K0 ^ opad) || Hash((K0 ^ ipad)||text))</p>

<p>对上面公式说明如下：</p>

<ol>
<li>若K = 64 ，令K0 = K,跳转到步骤4</li>
<li>若K > 64 , 令K0 = Hash(K)，跳转到步骤4</li>
<li>若K &lt; 64 , 则在K末尾补字节0x00产生64字节K0</li>
<li>K0与ipad异或产生64字节字符串：K0 ^ ipad</li>
<li>将text追加到步骤4的末尾：(K0 ^ ipad) || text</li>
<li>将步骤5得到的字符串进行哈希得到：Hash((K0 ^ ipad) || text)</li>
<li>K0与opad异或：K0 ^ opad</li>
<li>将步骤6产生的结果追加到步骤7的结果末尾：(K0 ^ opad) || Hash((K0 ^ ipad) || text)</li>
<li>对步骤8的结果做哈希得到：Hash((K0 ^ opad) || Hash((K0 ^ ipad) || text))</li>
<li>步骤9得到的哈希值作为MAC值。</li>
</ol>


<h4>4.基于SM3的HMAC</h4>

<p>HMAC算法依照FIPS规范，使用SM3算法生成HMAC</p>

<center>HMAC算法参数说明</center>


<table>
<thead>
<tr>
<th style="text-align:center;">   ipad        </th>
<th style="text-align:center;"> 填充字符串，内容为：8位字节0x36 重复<strong>32</strong>次  </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">   opad        </td>
<td style="text-align:center;">  填充字符串，内容为：8位字节0x5c,重复<strong>32</strong>次   </td>
</tr>
<tr>
<td style="text-align:center;">   text        </td>
<td style="text-align:center;">  所输入的需要计算MAC的数据，不包括填充字符串 </td>
</tr>
<tr>
<td style="text-align:center;">   K       </td>
<td style="text-align:center;">MAC密钥</td>
</tr>
<tr>
<td style="text-align:center;">   t       </td>
<td style="text-align:center;">所得MAC的字节长度</td>
</tr>
<tr>
<td style="text-align:center;">   Hash安全哈希算法  </td>
<td style="text-align:center;">使用密钥K对M进行加密</td>
</tr>
<tr>
<td style="text-align:center;">   Dk&copy;   </td>
<td style="text-align:center;">使用密钥K对C进行解密</td>
</tr>
</tbody>
</table>


<p>其计算公式如下：</p>

<p>MAC(text)t = HAMC(K,text)t = Hash((K0 ^ opad) || Hash((K0 ^ ipad)||text))</p>

<p>对上面公式说明如下：</p>

<ol>
<li>若K = 32 ，令K0 = K,跳转到步骤4</li>
<li>若K > 32 , 令K0 = Hash(K)，跳转到步骤4</li>
<li>若K &lt; 32 , 则在K末尾补字节0x00产生32字节K0</li>
<li>K0与ipad异或产生32字节字符串：K0 ^ ipad</li>
<li>将text追加到步骤4的末尾：(K0 ^ ipad) || text</li>
<li>将步骤5得到的字符串进行哈希得到：Hash((K0 ^ ipad) || text)</li>
<li>K0与opad异或：K0 ^ opad</li>
<li>将步骤6产生的结果追加到步骤7的结果末尾：(K0 ^ opad) || Hash((K0 ^ ipad) || text)</li>
<li>对步骤8的结果做哈希得到：Hash((K0 ^ opad) || Hash((K0 ^ ipad) || text))</li>
<li>步骤9得到的哈希值作为MAC值。</li>
</ol>


<p>[参考]</p>

<ol>
<li>[中国金融集成电路(IC)卡规范 第16部分]</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[傅盛之路]]></title>
    <link href="http://codefunny.github.io/blog/2014/12/03/internet-history/"/>
    <updated>2014-12-03T16:19:45+08:00</updated>
    <id>http://codefunny.github.io/blog/2014/12/03/internet-history</id>
    <content type="html"><![CDATA[<p><img src="http://codefunny.github.io/images/custom_images/hulianwangchuangye-800.jpg" alt="image" /></p>

<p>[前言：本文内容来源于网络，后面后做出说明，这里只是将众家之言汇于一炉，重新编排，算不得原创，只是记录一下笔记。]</p>

<!--more-->


<p>据该知情人士称，当初傅盛这位山东工商学院99届信息管理与信息系统专业毕业生只身一人北上来京，实际目的是为了准备考研，之前一段大型国企的工作生活经历(曾任厦华电脑电子商务部负责人)，平淡、安稳，也许令他感到恐惧。加入 3721 是为了在复习闲暇有份工作，不要太闲，也能感受一下互联网气氛，那段时日，他很是寂寂无闻了一阵。[选自参考1]</p>

<p>他告诉记者，书里的一句话一直被他视为座右铭，“这个世界上各式各样的人，有些人在小舞台演一个大角色，有些人只要在大舞台上，哪怕是演一个不重要的角色，都行。”而他始终对自己的定位是后一种人。(这本书应该就是《联想为什么》)[选自参考2]</p>

<p>2008年周鸿祎把奇虎分成三个部分：搜索，360安全，口碑营销。当时的奇虎重心放在搜索业务上面，由周鸿伟负责，傅盛负责360安全业务。不过最终搜索败了，口碑营销沦为鸡肋，只剩下360安全一枝独秀。但360安全不是周鸿祎亲自掌控的业务，他寄予的重望和大量的精力一直在搜索。[选自参考4]</p>

<p>傅盛说自己的特质是善于换位思考，他习惯去理解别人而不是沉溺在自己的世界。做产品，偏左一点是冒险，偏右一点是保守，而他总能找到最好的黄金分割点，既兼听，又有特点，所以他比多数天生聪颖的人都更适合做一名产品经理。而早期360安全卫士在内部不受重视，这也给了傅盛默默成长，一点点建立自信的环境——因为有时候聚光灯会让他退缩。[选自参考2]</p>

<p><strong>恩怨从何起</strong></p>

<p>当时在周鸿祎带领下奇虎已经进行了20多项产品开发，唯独傅盛负责的360发展迅猛。出于对360安全卫士控制权的争夺，双方之间产生了冲突和矛盾。</p>

<p>奇虎旗下的二三十个项目最后只有360安全卫士真正起来，成为明星产品。结果导致其他项目的人员来瓜分360安全卫士成熟的果实。“分蛋糕，那要按资排辈的，公司大小老板、老臣嫡系，拿大的，其他团队拿小的，到傅这没多少了，傅心理不平衡啊，搁谁那都会不平衡。然后傅就走了“。该人士如此分析。</p>

<p>傅盛说周鸿祎无法容忍他人功高盖主，逼宫将自己赶走。而周鸿祎这方则摆出诸多事例指责傅盛“膨胀”、“私开个人公司”。2011年，360在香港起诉傅盛，指责其“泄露东家机密”，并对傅盛所开发的产品进行拦截。“这是要把人逼上绝路。”傅盛说。[参考2]</p>

<p>提起当初做产品，傅盛说&#8221;周鸿祎教导我，为了产品，你要见佛杀佛。所以我在这家公司横冲直撞，就是因为相信他的产品理念。结果，我自己被杀掉了。”[参考2]</p>

<p>此前在雷军准备投资傅盛做可牛影像软件，雷军就收到周鸿祎的带话：不要接受傅盛，接受就是作对。雷军也带话给周鸿祎:第一，傅盛给你打了几年工，但不意味着一辈子是你的人，卖给你了。第二，我跟傅盛讨论的业务不跟360竞争。第三，你让我不投资前360员工，可你投资了多少金山前员工?</p>

<p><strong>傅盛的突围</strong></p>

<p>2008年傅盛离开360，在投资人张颖(经纬创投的创始管理合伙人)邀请下加入经纬中国任副总裁。不就就成立可牛公司，经纬中国投资3000万美元，傅盛出任公司董事长兼CEO，涉足老本行，2010年5月，推出可牛免费杀毒软件。</p>

<p>雷军相人，雷军形容傅盛当初创业情景说，在北京郊区租了一套房子，每月3,000元，给员工发1,000元生活费，他与当时的可牛CTO徐鸣不发工资。大家吃住在办公室，给一位阿姨2,000元让她每天做菜。在这样的条件下，一个半月后可牛影像发布了。</p>

<p>正是这种创业精神打动了雷军，为了促成两家的合并，雷军与傅盛一个月内就合并事宜谈判了12次，并且说服经纬创投接受此建议。2010年10月，金山安全与可牛合并成立金山网络（已更名为猎豹移动），由傅盛担任公司CEO。</p>

<p>那时的猎豹移动，内忧外患，几近陷入迷茫。傅盛表示：“经过周详的考虑，分析了市场格局和未来打法后，我们确定了三个原则：一是要做回简单，利用单点突破，不能再做加法了；二是PC端竞争门槛高，移动互联网时机刚好，要加大移动端的投入；三是做了一个大胆的决定，既然国内市场难找突破口，那就去海外市场。”</p>

<p>Clean Master（猎豹清理大师）几乎动用了公司的所有力量，投入了超过200名研发人员。不到两年，Clean Master野蛮生长，在过去一年中，月度活跃用户从去年年初100多万增长到现在的超过1.6亿。在全球拥有了2.4亿用户安装量，也是Google Play里全球排名第一的工具类应用。Clean Master在海外大获成功，也验证了傅盛“单点突破，以点带面，边缘到中心”的正确方法论，把一个点做到极致，并且足够简单。</p>

<p>谈及如何抓住下一阶段的互联网趋势？在傅盛看来，做“风口上的猪”已经不再容易，要做“风口上的紫牛”，即做与众不同的、抓住大趋势的产品。（解释：戈丁把推广创意的人称为“打喷嚏的人”，把被推广的创意称为“创意病毒”，把那些出众的产品或服务称为“紫牛”。）</p>

<p>在傅盛看来，做“紫牛”的原因在于：首先，全平时代到来，信息传播和全球渠道扁平化，传统行业的壁垒形同虚设；第二，互联网陷入资本与模仿的盛宴。风口猪群过多，只有具有紫牛特质，才能飞得更高；第三，满足需求无用，占领用户心智为王。“在生产过剩的年代，所谓的‘微创新’已经老了，必须不断寻找紫牛，以Think different方式把产品做到与众不同。”</p>

<p>对于如何评价30～40岁之间的创业者，傅盛认为，这个年代出生的人很尴尬，离上一代成功人士太近，又没有实现80后的个性解放。当年傅盛认为自己是“在人群之中还不错，但永远不是第一”，如今依然保持“要有空杯心态，学习行业的最多的变化，接受一切，不要用挑剔的心态看世界。”这或许也正是他始终保持学习的习惯，从不懈怠的原因。</p>

<p>“我在乎输赢，我更要认真。一个人怎么可能不在乎输赢？在乎输赢，但不怕输，而是用一种认真的态度完成身边的每一件事。”在IPO之后，傅盛在“回归简单”的闭门演讲中这样说道。</p>

<p><strong>傅盛的成功之路</strong></p>

<p>傅盛已经被证明是一名成功的创业者——他带领着一家在互联网时代原本已趋于落魄的公司金山网络（后更名“猎豹移动”，NYSE:CMCM）全面转型移动互联，在360的重重围堵之下，用三年半时间几乎是从无到有地创造了一家30亿美元的上市公司</p>

<p>猎豹广告收入中70％来自BAT，总收入中有58％来自BAT。猎豹上市时，金山软件、百度、小米共同认购了猎豹5000万美元的股份。而腾讯则认购了2000万美元的股份。</p>

<p>一位创业者评价傅盛时说，“傅盛执着，懂得借力打力，不惜自毁名声和老东家决斗，但傅盛到底是谁？不就是幸运吗？”</p>

<p>一位猎豹员工评价傅盛说，如果说过去傅盛有太多放不下的地方，但现在他看准一个点，其他东西都可以不要。这种目标性让他有时候看上去咄咄逼人。</p>

<p>傅盛说，他能不断进步的核心是因为他始终觉得自己是一个很平凡的人，他习惯于仰视别人，一直怀着一种诚惶诚恐的心态。</p>

<p>雷军对他说：“你是一个比你自己认为的要强大的人。”</p>

<p>傅盛从周鸿祎身上看到了极致的做事方式，所以他单点突破做了毒霸和浏览器。而从雷军身上学到顺势而为的思考方式，所以他在毒霸增长放缓的2013年，站在了移动互联网的风口上，放弃PC，孤注一掷做猎豹移动。</p>

<p>周鸿曾对员工灌输的理论之一是，只要你在一个点上持续做，你就会有机会。但傅盛说他后来明白这句话是错的，因为如果你往一个方向相反的点持续做，你就永远没有机会。</p>

<p>周鸿祎的方法论是寻找巨头的弱点，而雷军，是顺势而为和互联网思维。</p>

<p>傅盛这两年变化和进步很大，他开始有了自己的风格。“人们把我的成功归于偶然，于是不以为然。其实我看到偶然就会琢磨必然性，然后找出方法论，方法论错了，我就再琢磨，换一种方法论。”</p>

<p>傅盛的“边缘化切入、单点突破”和周鸿的“集中优势兵力，单点突破”有相似之处，周鸿祎善于找准方向，傅盛继承了这一点，他还发挥了自己的长处：极致的用户体验，以及敢于孤注一掷。傅盛说，没有谁能集中公司全部精力去做一个如此简单的产品，这才是真正的门槛。</p>

<p>傅盛坦言，他内心一直希望自己可以摒弃掉之前所受的一整套教育，内心不要太瞻前顾后，再叛逆一些，再激进一些，再与众不同一些。也就是说，多增加一些坏孩子的“特质”。</p>

<p>张颖说，傅盛身上其实有很强悍的一面，他身上汇集了太多的势能，一定会爆发。他说他相信傅盛有一天一定能成为新一代互联网大佬。</p>

<p>当然上面的还算是正面评价，那么傅盛身边的人或者对手是如何评价他的呢，不妨看一看下面的文章，所谓兼听则明，偏信则暗，按照我的说法，都是泥地里滚过来的，哪有干净人。</p>

<ol>
<li><a href="http://news.cnblogs.com/n/118860/">傅盛离职内情：从360叛将到腾讯马前卒</a></li>
<li><a href="http://news.cnblogs.com/n/118066/">傅盛口述：揭秘与360历史恩怨</a></li>
</ol>


<p>[参考]</p>

<ol>
<li><a href="http://chuangye.umiwi.com/2011/1027/45328.shtml">3Q大战远去 傅盛与周鸿祎恩怨情仇曝光</a></li>
<li><a href="http://money.163.com/14/0701/18/A03ADVFP00253B0H.html#from=relevant#xwwzy_35_bottomnewskwd">傅盛：站在大佬肩膀上</a></li>
<li><a href="http://money.163.com/14/0902/08/A54F3HIF00253G87.html">傅盛：从“马前卒”到“霸王车”</a></li>
<li><a href="http://yeyuan.baijia.baidu.com/article/38513">科技界离职员工和老东家的恩怨情仇</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[做题理解Object-C的runtime问题]]></title>
    <link href="http://codefunny.github.io/blog/2014/12/02/objc-runtime/"/>
    <updated>2014-12-02T18:19:36+08:00</updated>
    <id>http://codefunny.github.io/blog/2014/12/02/objc-runtime</id>
    <content type="html"><![CDATA[<p><img src="http://codefunny.github.io/images/custom_images/objc-800.jpg" alt="object-c" /></p>

<!-- more -->


<h4>问题一：下面的代码输出什么？</h4>

<pre><code>@implementation Son : Father
- (id)init
{
    self = [super init];
    if (self)
    {
        NSLog(@"%@", NSStringFromClass([self class]));
        NSLog(@"%@", NSStringFromClass([super class]));
    }
    return self;
}
@end
</code></pre>

<p>上面的问题其实考察的就是对<code>self</code>和<code>super</code>的理解程度。首先明确<code>self是类的隐藏参数，指向当前调用方法的这个类的实例</code>。super本质上是一个编译器指示符(<strong>查看runtime源码有self和superclass的定义，并没有找到super的定义，可见super非实有，编译器会对其进行解释</strong>)，super和self指向的同一个消息接受者。上面的例子，[self class]和[super class]，接受消息的对象都是当前的Son *xxx这个对象。不同之处，是super告诉编译器，调用class去父类的方法。</p>

<p>说的直白一点就是，self告诉编译器查找方法先从本类方法列表找，再去父类找；使用super时，则从父类的方法列表中找，以此类推。</p>

<p>所以上题中[self class]输出就是：<code>Son</code>，这里需要我们把这个顺序捋一捋就清楚了，首先Son没有实现class，所以会去Father类中找，也没有，接着就到了NSObject，在NSObject中有这个方法，看下面的定义，返回的就是self的类别。</p>

<pre><code>- (Class)class {
    return object_getClass(self);
}
</code></pre>

<p>再看[super class],在Father中没有，再去NSObject类中，看了上面的class的定义，是不是发现了，还是返回self的类别，所以[super class]的输出也是：<code>Son</code>。</p>

<p>以上的理解参考了下面两篇文章,你可以去全面的了解一下。</p>

<ol>
<li><a href="http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/">Objective-C Runtime</a></li>
<li><a href="http://chun.tips/blog/2014/11/05/bao-gen-wen-di-objective%5Bnil%5Dc-runtime(1">刨根问底Objective－C Runtime（1）－ Self &amp; Super</a>%5Bnil%5D-self-and-super/)</li>
</ol>


<h4>问题二：下面代码的运行结果是？</h4>

<pre><code>@interface Sark : NSObject
@end

@implementation Sark
@end

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        BOOL res1 = [(id)[NSObject class] isKindOfClass:[NSObject class]];
        BOOL res2 = [(id)[NSObject class] isMemberOfClass:[NSObject class]];

        BOOL res3 = [(id)[Sark class] isKindOfClass:[Sark class]];
        BOOL res4 = [(id)[Sark class] isMemberOfClass:[Sark class]];

        NSLog(@"%d %d %d %d", res1, res2, res3, res4);
    }
    return 0;
}
</code></pre>

<p>上面题目主要考察就是对<code>isKindOf</code>和<code>isMemberOf</code>方法的认识，以及对<code>class</code>和<code>meta class</code>的理解。下面就先来了解这几个方法和概念。</p>

<p>首先看一看class的实现，他返回类对象本身。</p>

<pre><code>+ (Class)class {
    return self;
}
</code></pre>

<p>所以上面的[NSObject class]返回的就是NSObject对象本身，[Sark class]返回的就是Sark对象了。</p>

<pre><code>- (BOOL)isKindOf:aClass
{
    Class cls;
    for (cls = isa; cls; cls = cls-&gt;superclass) 
        if (cls == (Class)aClass)
            return YES;
    return NO;
}
</code></pre>

<p>从上面知道，isKindOf用于判断是否这个类或这个类的子类的实例。</p>

<pre><code>- (BOOL)isMemberOf:aClass
{
    return isa == (Class)aClass;
}
</code></pre>

<p>isMemberOf只会判断是否这个类的实例。</p>

<p>对上面两个方法有了了解，还需要进一步了解<code>isa</code>和<code>class</code>以及<code>meta class</code>的关系。通过一张图片来认识一下。</p>

<p><strong>在Object-C的设计哲学中，一切都是对象，Class本身也是一个对象，而这个对象对应的类就是Meta Class。即Class结构体中的isa指向的就是它的Meta Class 。</strong></p>

<p><img src="http://106.186.113.24:8888/other/Class%26MetaClass.001.jpg" alt="image" /></p>

<p>通过上图我们知道，实例对象的<code>isa</code>是指向对象，而对象的isa则指向meta对象。了解了这几个变量的作用，我们就不难理解上面的答案应该是：</p>

<pre><code> 1 0 0 0
</code></pre>

<p>只有对象的实例使用<code>isMemberOf</code>才有可能返回<code>YES</code>，其他非实例对象返回的都是<code>NO</code>，而<code>isKindOf</code>也是针对实例方法而言的，特殊的例外就是<code>NSObject</code>对象了，因为<code>NSObject对象的isa指向的meta class的superclass就是NSObject对象</code>。</p>

<p>本文总结自@Chun发表于Chun Tips的<a href="http://chun.tips/blog/2014/11/05/bao-gen-wen-di-objective%5Bnil%5Dc-runtime-(2)%5Bnil%5D-object-and-class-and-meta-class/" title="刨根问底Objective－C Runtime（2）－ Object &amp; Class &amp; Meta Class">刨根问底Objective－C Runtime（2）－ Object &amp; Class &amp; Meta Class</a></p>

<h4>问题三、下面代码会？Compile Error / Runtime Crash / NSLog…?</h4>

<pre><code>@interface NSObject (Sark)
+ (void)foo;
@end

@implementation NSObject (Sark)

- (void)foo
{
    NSLog(@"IMP: -[NSObject(Sark) foo]");
}

@end

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        [NSObject foo];
        [[NSObject new] foo];
    }
    return 0;
}
</code></pre>

<p>上面这个题目玩的也是奇技淫巧，要特别注意是NSObject的扩展，而不是别的类的扩展，一定要深刻了解前面的图示。那么这一道题要考察的就是对方法传递的机制的熟悉程度。</p>

<p>上面的两个方法，在编译的时候会转换成下面的方法调用：</p>

<pre><code> ((void (*)(id, SEL))(void *)objc_msgSend)((id)objc_getClass("NSObject"), sel_registerName("foo"));
 ((void (*)(id, SEL))(void *)objc_msgSend)((id)((NSObject *(*)(id, SEL))(void *)objc_msgSend)((id)objc_getClass("NSObject"), sel_registerName("new")), sel_registerName("foo"));
</code></pre>

<p>具体的分析过程，请看这里<a href="http://chun.tips/blog/2014/11/06/bao-gen-wen-di-objective%5Bnil%5Dc-runtime(3)%5Bnil%5D-xiao-xi-he-category/">刨根问底Objective－C Runtime（3）－ 消息 和 Category</a> 。这里就只记录最终的一个分析过程。</p>

<p><strong>上面的代码在objc runtime加载完后，NSObject的Sark Category被加载，由于+(void)foo并没有实现，所以编译器进行静态检查时，会出现警告信息，提示我们方法没有实现，但在代码编译中，它会被注释掉。</strong></p>

<p><strong>实际上被加入到Class的method list的方法是- (void)foo，它是一个实例方法，所以加入到当前类对象NSObject的方法列表中，而不是NSObject Meta Class的方法列表中。</strong></p>

<p>当执行<code>[NSObject foo]</code>时，其过程是</p>

<ol>
<li>objc_msgSend的第一个参数“(id)objc_getClass(&ldquo;NSObject&rdquo;)”，获得NSObject Class的对象；</li>
<li>类方法在Meta Class的方法列表中找，我们在load Category方法时加入的是- (void)foo实例方法，所以并不在NSObject Meta Class的方法列表中；</li>
<li>继续往super class中找，结合前面可知，NSObject Meta Class的super class就是NSObject本身，所以，这时候找到-(void)foo方法；</li>
<li>所以这里输出结果：<code>IMP: -[NSObject(Sark) foo]</code>.</li>
</ol>


<p>当执行<code>[[NSObject new] foo]</code>，其过程如下</p>

<ol>
<li>[NSObject new]生成一个NSObject对象；</li>
<li>直接在该对象的类(NSObject)的方法列表里找；</li>
<li>可以找到，所以输出结果：<code>IMP: -[NSObject(Sark) foo]</code>。</li>
</ol>


<h4>问题四：下面代码会? Compile Error / Runtime Crash / NSLog…?</h4>

<pre><code>@interface Sark : NSObject
@property (nonatomic, copy) NSString *name;
@end

@implementation Sark

- (void)speak
{
    NSLog(@"my name is %@", self.name);
}

@end

@interface Test : NSObject
@end

@implementation Test

- (instancetype)init
{
    self = [super init];
    if (self) {
        id cls = [Sark class];
        void *obj = &amp;cls;
        [(__bridge id)obj speak];
    }
    return self;
}

@end

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        [[Test alloc] init];
    }
    return 0;
}
</code></pre>

<p>具体的解答过程参考<a href="http://chun.tips/blog/2014/11/08/bao-gen-wen-di-objective%5Bnil%5Dc-runtime(4)%5Bnil%5D-cheng-yuan-bian-liang-yu-shu-xing/">刨根问底Objective－C Runtime（4）－ 成员变量与属性</a></p>

<p>上面例子的关键在以下代码：</p>

<pre><code>id cls = [Sark class];
void *obj = &amp;cls;
[(__bridge id)obj speak];
</code></pre>

<p>通过前面可知，[Sark class]即指向Sark对象本身，转换成id对象，而id实际上就是struct objc_object类型，obj则是指向cls的指针（按chun的说法是，obj相当于一个Sark的实例对象，但又不同于[Sark new]产生的对象），那么在obj所指向的Sark Class的方法列表中可以找到speak方法。</p>

<p>按我的理解就是，obj的目的就是为了使其isa指向Sark Class，因为按照前面的分析，cls的isa实际上是指向Sark的Meta Class，采用[cls speak]在Meta Class的方法列表中是找不到方法的，会报错，[(id)obj speak]则是在Sark Class方法列表中查找到了speak方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript学习笔记]]></title>
    <link href="http://codefunny.github.io/blog/2014/11/27/javascript-note/"/>
    <updated>2014-11-27T18:08:26+08:00</updated>
    <id>http://codefunny.github.io/blog/2014/11/27/javascript-note</id>
    <content type="html"><![CDATA[<p>Javascript学习笔记</p>

<!-- more -->


<h1>javascript模块化编写</h1>

<pre><code>event = function(){
    return {
        bind: function(){},
        unbind: function(){},
        trigger: function(){}
    };
}();
</code></pre>

<p>可以参考jQuery的匿名函数执行写法</p>

<pre><code>(function(window){
    //..
    // exports
    window.jQuery = window.$ = jQuery;
})(window);
</code></pre>

<p>Seajs的写法</p>

<pre><code>this.seajs = { _seajs: this.seajs };
</code></pre>

<p>其实上面的this也可以去掉，如Ext</p>

<pre><code>Ext = {
    version : '3.1.0'
};
</code></pre>

<p>下面代码经过在chrome浏览器测试可以运行</p>

<pre><code>//jQuery写法
;(function(window){

    animate = {
        Cat:Cat
    }

    function Cat(name,color){
        this.name = name;
        this.color = color;
        this.type = '猫科动物';
        this.eat = function(){ alert('mouse');};
    }

    window.animate = animate;

})(window);

//执行函数之后，myevent就是{}对象了。
myevent = function(){
    function _show(){
        alert('this is show!');
    }

    return {
        show : _show
    };
}();

//seajs写法
this.peterjs = {_peterjs: this.peterjs};
peterjs = {
    show : function(){
        alert('this is peterjs');
    }
};

peterjs.version = '1.1.0';

//ext写法
Ext = {
    version : '3.1.0'
};
</code></pre>

<p>【参考】</p>

<ol>
<li><a href="http://www.cnblogs.com/snandy/archive/2012/03/08/2378441.html">http://www.cnblogs.com/snandy/archive/2012/03/08/2378441.html</a></li>
</ol>


<h1>Javascript面向对象方法</h1>

<h4>constructor属性和instanceof方法</h4>

<p>constructor属性指向它们的构造函数；<br/>
instanceof运算符，验证原型对象与实例对象之间的关系；</p>

<h4>prototype模式</h4>

<p>javascript规定，每一个构造函数都有一个prototype属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。意味着，可以将那些不变的属性和方法，直接定义在prototype对象上。</p>

<pre><code>function Cat(name,color){
    this.name = name;
    this.color = color;
}
//注意是类名不是实例名
Cat.prototype.type = '猫科动物';
Cat.prototype.eat = function(){ alert('eatmouse'); };

var cat1 = new Cat('damao','orange');
alert(cat1.type);
cat1.eat();
</code></pre>

<h4>isPrototypeOf()和hasOwnProperty()方法与in运算符</h4>

<ol>
<li>isPrototype()用来判断某个prototype对象和某个实例之间的关系</li>
<li>hasOwnProperty()用来判断某一个属性到底是本地属性还是继承自prototype对象的属性.</li>
<li>用于判断某个实例是否含有某个属性，不管是不是本地属性</li>
</ol>


<p>下面代码帮助理解：</p>

<pre><code>alert(Cat.prototype.isPrototypeOf(cat1)); //true
alert(cat1.hasOwnProperty('name')); //true
alert(cat1.hasOwnProperty('type')); //false
alert('name' in cat1); //true
alert('type' in cat1); //true
</code></pre>

<p>【参考】
1. <a href="http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html">http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html</a></p>

<h1>Javascript构造函数的继承</h1>

<p>对象之间继承的5种方法</p>

<pre><code>function Animal(){
    this.species = "animate";
}

function Cat(name,color){
    this.name = name;
    this.color = color;
}
</code></pre>

<p>一、 构造函数绑定
使用call或apple方法，将父对象的构造函数绑定在子对象上</p>

<pre><code>function Cat(name,color){
    Animal.apply(this, arguments);
    this.name = name;
    this.color = color;
}

var cat1 = new Cat('tom','blue');
alert(cat1.species);
</code></pre>

<p>二、prototype模式</p>

<pre><code>Cat.prototype = new Animal();
Cat.prototype.constructor = Cat;
var cat1 = new Cat('tome','blue');
alert(cat1.species);
</code></pre>

<p>对上面需要说明的是第二行，因为第一行将Cat的prototype指向了一个新的对象，那么相应地prototype.constructor也就指向了Animal，不是我们要的结果，所以要加上第二行纠正。</p>

<p>三、直接继承prototype（这个方法是有问题的）
该方法是第二种方法的改进。由于Animal对象中不变的属性都可以直接写入Animal.prototype中，所以可以直接继承Animal.prototype。</p>

<pre><code>function Animal(){}
Animal.prototype.species = "Animal";
Cat.prototype = Animal.prototype;
Cat.prototype.constructor = Cat;
</code></pre>

<p>上面的代码执行效率比较高，因为不用执行和建立Animal的实例。但是有一个缺点就是，任何对Cat。prototype的修改都会反映到Animal.prototype上。就是说第四行实际上也把Animal的构造函数给改了。</p>

<p>四、利用空对象作为中介（这是对上面方法的改进）</p>

<pre><code>function extend(Child,Parent){
    var F = function(){};
    F.prototype = Parent.prototype;
    Child.prototype = new F();
    Child.prototype.constructor = Child;
    Child.uber = Parent.prototype;
}

extend(Cat,Animal);
var cat1 = new Cat('tom','blue');
alert(cat1.species);
</code></pre>

<p>上面F是空对象，几乎不占内存。修改Cat的prototype对象，就不会影响到Animal的prototype对象。uber是备用，指向府对象的原型。</p>

<p>五、拷贝继承</p>

<pre><code>function extend1(Child,Parent){
    var p = Parent.prototype;
    var c = Child.prototype;
    for(var i in p){
        c[i] = p[i];
    }

    c.uber = p;
}
extend1(Cat,Animal);
var cat1 = new Cat('tom','blue');
alert(cat1.species);
</code></pre>

<h1>Javascript非构造函数继承</h1>

<p>深拷贝(jQuery库使用的就是这种继承方法)</p>

<pre><code>function deepCopy(p){
    var c = c || {};
    for(var i in p){
        if(typeof p[i] === 'object'){
           c[i] = (p[i].constructor === Array) ? [] : {};
            deepCopy(p[i],c[i]);
        } else {
            c[i] = p[i];
        }
    }
    return c;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hybrid模式下支付宝钱包APP探秘]]></title>
    <link href="http://codefunny.github.io/blog/2014/11/25/hybrid-alipay-app/"/>
    <updated>2014-11-25T13:16:12+08:00</updated>
    <id>http://codefunny.github.io/blog/2014/11/25/hybrid-alipay-app</id>
    <content type="html"><![CDATA[<p><img src="http://codefunny.github.io/images/custom_images/zhifubaoqianbao.jpg" alt="image" /></p>

<!-- more -->


<p>探秘对象是iOS系统8.3.0版本支付宝钱包，拿到ipa文件之后，进行解压缩处理，从中我们可以看到这几类文件，png的图像、amr结尾的文件、plist文件、bundle文件等文件格式。</p>

<p>在其中有两个文件特别的眼熟，那就是<code>cordovaios.txt</code>和<code>WebViewJavascriptBridge.js.txt</code>文件，打开发现这两个文件没有经过改造，还是原来的配方。amr文件在<a href="http://codefunny.github.io/blog/2014/11/17/hybird-ios/">上一篇</a>已经说明是可压缩文件，大家可以解压缩看看里面的内容，就发现实际上都是一堆js、html、css文件。我们后面再来探秘这一块。</p>

<p>现在我要去找一找传说的<code>AliPayBridge.js</code>在哪里呢，有一个<code>H5Service.bundle</code>引起了我的注意,打开显示里面的内容，在后面有几个js和plist文件，真相开始浮出水面了，打开h5_bridge.js文件，里面终于找到<code>window.AlipayJSBridge</code>的身影。</p>

<p>我的javascript功能还处于初级阶段，也只能大概的了解一下作用，JSAPI主要定义了几大方法，</p>

<blockquote><p>call、trigger、<em>invokeJS、</em>handleMessageFromObjC、_fetchQueue、loadPlugin</p></blockquote>

<p>从名字就可以知道其用途，前面的好说，最后一个<code>loadPlugin</code>，用于载入一个或多个动态插件，采用js来实现动态加载，这个应该就是支付宝钱包最重要的一个方法了。</p>

<p>还有一个<code>h5_bridge_for_scanApp.js</code>，里面有一个scanAppCallFunMap的Dictionary变量，看里面定义了几个重要的方法调用。</p>

<p>前面提过<code>cordovaios.txt</code>，看来阿里是集众家之长，后面再去看一看了，现在我比较关心的是，如何集成这些独立的插件，还有就是如何有效的管理，实际上就是开发框架和安全问题了。</p>

<p>前面我也提到了阿里的arale前端框架，这个框架在11000002.amr里面看到过，在淘宝和天猫页面，我发现了他们有使用另外一个框架KISSY。每个amr里面都有一个<code>Manifest.xml</code>文件和<code>CERT</code>文件，前面应该是配置文件，后面应该是安全相关的证书文件。这一套有机体如何配合完成整个框架还不清楚，继续摸索吧。</p>

<p>这是zepto.js的一个小游戏，我替换了里面的data.js并修改了里面的一些参数，放在博客里面，发现前端的功能越来越好玩了，<a href="http://codefunny.github.io/class/app/lucky.html">点击去玩一玩吧</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[github问题之“Empty reply from server”]]></title>
    <link href="http://codefunny.github.io/blog/2014/11/24/test/"/>
    <updated>2014-11-24T15:33:56+08:00</updated>
    <id>http://codefunny.github.io/blog/2014/11/24/test</id>
    <content type="html"><![CDATA[<p><img src="http://codefunny.github.io/images/custom_images/github-log.jpg" alt="image" /></p>

<!-- more -->


<p>这两个星期，每次提交<code>sudo rake deploy</code>,就会遇到下面的问题</p>

<pre><code>fatal: unable to access ‘https://github.com/xxxxx’: Empty reply from server.
</code></pre>

<p>在网上找了好久，每个解决的办法都不一样，又说是git2.0的问题，需要执行这样的命令<code>git config --global push.default matching</code>，可是还是同样的问题。最后有网友说是git被墙了，需要用vpn提交，看到这样的答案真是无语了，难道就没有办法了吗。</p>

<p>终于功夫不负有心人，又有人提出采用ssh的方式取代https，那么怎么搬到呢，我们需要执行下面的命令，或者到.git/config中修改remote-url，</p>

<pre><code>git remote set-url origin git@github.com:codefunny/codefunny.github.io.git
</code></pre>

<p>然后再提交<code>sudo rake deploy</code>,结果这次报下面的错误：</p>

<pre><code>Permission denied (publickey).
fatal: Could not read from remote repository.
</code></pre>

<p>根据说法就是sshkey正确了，大家就去<a href="https://help.github.com/articles/generating-ssh-keys/#step-3-add-your-ssh-key-to-your-account">https://help.github.com/articles/generating-ssh-keys/#step-3-add-your-ssh-key-to-your-account</a>进行设置，我之前设置过，但还是报错，于是使用<code>ssh -vT git@github.com</code>进行测试，结果我知道了，使用sudo和非sudo使用的sshkey是不一样的，一个在/var/root/目录里,一个是/Users/username/目录下，所以是我使用<code>sudo</code>的缘故，怎么解呢？</p>

<p>那就更改<code>_deploy</code>所属权，将其由root改为username，下面的命令可以帮助到你<code>sudo chown -R username ./_deploy</code>，这样就就可以使用下面的命令再来提交一次<code>rake deploy</code>，正常的情况下会提交成功，在非正常的情况，可能还会出现下面的问题，</p>

<pre><code>error: src refspec master does not match any.
</code></pre>

<p>此时可以尝试做出点修改，再执行一遍下面的命令中的某个或某几个</p>

<pre><code>rake generate
git add .
git commit -am 'modifiy'
rake deploy
</code></pre>

<p>通过上面的探索总算是解决了问题，现在发现在网上找到最正确地答案真是越来越难了，自己不得不一个一个的去校验答案的正确性。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[浅析hybrid模式下地支付宝钱包和微信]]></title>
    <link href="http://codefunny.github.io/blog/2014/11/17/hybird-ios/"/>
    <updated>2014-11-17T10:27:52+08:00</updated>
    <id>http://codefunny.github.io/blog/2014/11/17/hybird-ios</id>
    <content type="html"><![CDATA[<p><img src="http://codefunny.github.io/images/custom_images/weixin-zhifubao.png" alt="image" /></p>

<!-- more -->


<h2>开篇</h2>

<hr />

<p>近期一直在为插件式开发而不断探询，对于android端已经有一套插件式开发的框架，有通过java的反射机制实现的plugin，但目前我还没有找到一套完整的开源的框架，后期继续寻找。而对于iOS端，由于object-c没有java的反射机制，于是就想到了动态加载的方式，而网友们发现苹果公司禁止开发者使用动态库，而只允许使用静态库，所以使用加载动态库的方式目前是行不通了。</p>

<p>那现在就剩下两条路，就是采用webapp开发和hybird模式，对于webapp，现在也是许多人探索的道路了，这种方式的好处和劣势也是相当明显，好处是可以实现跨平台，iOS，android，windowsphone都可以使用，移植性好；不好的地方就是对于目前普遍的3G和4G网络来说，耗费流量也是一个大问题，还有就是在体验上比不了native的快速。不过按照PC端发展和通讯网络的趋势和，webapp是未来的大方向。</p>

<p>而hybird模式就是目前native和webapp之间的一种过渡方式了，采用h5和native相结合的模式，目前已经有相当成熟的发展了，阿里巴巴和腾讯都有自己的一套框架，而网络上也有组织开源了这方面的源码，像phonegap和cordva就是早期的践行者，现在也有不少公司推出了商业版，具体可以到网络上搜寻，今天我要记录的就是我在研究支付宝钱包和微信的hybird开发构想，所有资料均来源于网络。</p>

<h2>前人的研究成果</h2>

<hr />

<p>如果想对支付宝钱包有一些了解可以参考网上的几篇文章，<a href="http://blog.devtang.com/blog/2013/06/23/alipay-plugin-mechanism/">分析支付宝客户端的插件机制</a>、<a href="http://imallen.com/blog/2013/06/26/inside-alipay-plugin.html">浅析支付宝钱包插件</a>和<a href="http://imallen.com/blog/2013/07/06/about-alipay-plugin-and-phonegap.html">再谈支付宝钱包插件和说好的 Demo</a> 网上还有一篇支付宝钱包的文章<a href="http://www.wojilu.com/forum1/post/22475">PhoneGap版支付宝Android客户端开发小结</a>,从内容看应该是内部开发人员的总结，对于微信资料则少之又少，我们要谈的不是开放平台，我其实特想知道他们的开发思路，当然这是商业机密，我只好从现有的表象中去探寻了一点痕迹了。</p>

<p>先谈微信的android版吧，反编译的结果令人失望，腾讯已经对代码作了混淆等针对反编译而进行的防护措施，没有多少可用价值，不过有一个文件还是非常有价值的，那就是wxjs.js，关于这个javascript的发现和研究有人比我要早，大家可以去这里查看<a href="https://github.com/zxlie/WeixinApi">WeixinApi</a>,DarkAbyss也写了一篇介绍 <a href="http://www.gbtags.com/gb/share/2944.htm">weixinJSBridge的介绍</a>,iOS包里的wxjs.js是经过压缩过得，所以看的很吃力，由于所获信息有限，对微信的研究也就只能先进行到这里，期待着其他大牛能够继续努力了。</p>

<p>支付宝钱包前面已经有大牛尝试过分析，但是我还是对bybird模式不是特别清楚，phonegap的源码也有，但是对于长篇大论我向来没有兴趣，而国内介绍的文章大多是转帖几个大牛的文章，而大牛向来不拘小节，只介绍自己感兴趣的，无关的细节则忽略不计，想来这也是大牛不屑于重复别人的构想吧。加上我英文阅读能力有限，只能在茫茫大海似的网络中继续搜寻了。</p>

<h2>hybrid插件</h2>

<hr />

<p>通过对支付宝钱包和微信android端的反编译，发现里面有一些<code>.so</code>文件，在iOS端，微信内部没有发现<code>.so</code>文件，而在支付宝钱包内部，却又一些以<code>.amr</code>,前面有人已经指出，这些其实也是<code>.zip</code>文件，只是为了混淆一下作的掩饰，解压缩之后，里面其实一堆html，js和css的文件，那么我的疑问是app如何加载这些文件内，当然是用webview来加载，但是我的疑问是，app是解压之后的加载，还是在不解压的情况下进行加载，如果解压又解压到哪里，而iOS是不允许解压到<code>MainBundle</code>中的，这个我有做过尝试（<code>模拟器中可以，但是真机上却行不通，我试验的是xcode6，ios8.1,而网络资料显示，苹果这个版本又对app文件目录作了较大的调整</code>），如果解压到Document目录则没有问题。那么我猜想的一种情况是，app在需要的事后将文件解压到其他目录，然后再进行加载，这个过程当然可以通过配置文件控制。那么更大胆的一点想法是类似于Bundle方式，可以直接加载<code>.amr</code>里面的内容。但是我在网上没有找到这方面的资料。如果谁有资料可以发我一些。小弟感激不尽。</p>

<p>再进入到支付宝钱包的<code>.amr</code>内部，发现里面采用的一些webapp框架不像是一个团队开发，很像是几个不同的团队（或人）的作品，因为里面的风格各不相同，不过他们共同使用了zepto.js和sea.js，zepto.js是手机端的jquery，其宗旨就是追求jquery的功能，但是又不使文件过大，简言之就是麻雀虽小五脏俱全，而sea.js则是提供js的模块化开发。当然除了上面两个基本js框架之外，还有其他常用的js框架，比如scroll.js,json.js,fastclick.js等框架。当然在里面也发现了淘宝前端开发组的arale框架，我想阿里现在的研发团队非常多，同一个问题好几个团队在研究，也有好几套方案，这样做虽然说耗费人力，但是可以有效防止因为某一套框架的漏洞而导致整个app的crash，其实最终还会只有一两个的，只是这一两个一定是存优去劣而成的集大成者。</p>

<p>由于在微信上没有什么发现，我也没有去研究腾讯其他的app了，但是也发现腾讯前端也有自己的一套移动web框架了，叫<a href="http://alloyteam.github.io/Spirit/">spirit</a>,有兴趣可以自己去了解一下。可见在开源的道路上，阿里比腾讯走的要远。希望企鹅帝国除了赚钱之余，也能够和大家分享一下自己的研究成果，带领中国广大开发者一起成长进步。</p>

<h2>继续的远征</h2>

<hr />

<p>如果想要继续深入的了解hybrid编程，希望有一个简短易明的demo那岂不很好，最后终于在github上找到了，牛人早已造好车轮，只是我还来不及发现而已，<a href="https://github.com/marcuswestin/WebViewJavascriptBridge">WebViewJavascriptBridge</a>,这是这对iOS和OSX而设计的object-c和javascript通讯框架，已经有好些公司采用这一套了，包括Facebook Messager和Facebook Paper，若问我是怎么知道，那就得问问大牛了。</p>

<p>通过对该份源码的分析，发现其设计之巧妙令人心生佩服，再回来想想支付宝钱包和微信，他们应该都有借鉴这里的设计，然后进行了各自的扩展，我们有人找到了微信的wxjs.js,但是还没有找到alipaybridge.js的源码不知支付宝钱包放到哪里了，或许它的文件不叫这个名字，有时间慢慢找吧。</p>

<p>看完是不是感觉，初极狭，才通人，复行数十步，豁然开朗的感觉，这份源码已经将框架写的很清晰明白了，已经是不需要再多言了，任何的修饰都是累赘了。</p>

<h2>未来的构想</h2>

<hr />

<p>看完之后，发现对于iOS和andorid的开发人员而言，javascript已经是不可忽视的语言了，而且其开发分量将举足轻重，三星的Tizen就尝试了<code>h5+js+css</code>的方式来构建移动app，加上近期微软与<code>Apache Cordova</code>合作，推出的<code>visual studio</code>开始集成支持cordova来开发iOS、android、windowsphone的app，跨平台的壁垒似乎就要被打破了，相信在不久的将来会有更多地javascript人员加入到app的开发队伍中来。</p>

<p>既然hybrid模式是一个过渡阶段的产物，联想到PC端软件的发展过程，手机端最终的模式应该就是完全的h5的开发方式了，至于什么时候会大面积的颠覆，估计还得看网络带宽的进一步提高和资费的进一步降低，手机的硬件升级难度已经越来越大，后期的目标应该是在软件的体验和服务上。</p>

<p>写了这么多，也只是把我自己探索的一个过程整理了出来，后期会继续研究，希望对其他人也有所帮助，如有疏漏，还往大牛赐教。欢迎到<a href="http://codefunny.github.io">我的主页</a>留言。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的大学]]></title>
    <link href="http://codefunny.github.io/blog/2014/11/10/nov/"/>
    <updated>2014-11-10T14:08:32+08:00</updated>
    <id>http://codefunny.github.io/blog/2014/11/10/nov</id>
    <content type="html"><![CDATA[<p><img src="http://i2.tietuku.com/e2fa5448f97d195a.jpg" alt="image" /></p>

<!-- more  -->


<blockquote><p><em>月亮在白莲花般的云朵里穿行，</em><br><br>
<em>晚风吹来一阵阵快乐的歌声。</em><br><br>
<em>我们坐在高高的谷堆旁边，</em><br><br>
<em>听妈妈讲那过去的事情，</em><br><br>
<em>我们坐在高高的谷堆旁边，</em><br><br>
<em>听妈妈讲那过去的事情。</em><br></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开辟鸿蒙]]></title>
    <link href="http://codefunny.github.io/blog/2014/11/08/note-one/"/>
    <updated>2014-11-08T17:01:00+08:00</updated>
    <id>http://codefunny.github.io/blog/2014/11/08/note-one</id>
    <content type="html"><![CDATA[<p><em>2014年11月08日，今天终于把博客搭起来了，真是太周折了！抄诗一首纪念</em>
<br><br></p>

<blockquote><p>世人都晓神仙好，唯有功名忘不了；古今将相在何方，荒冢一堆草没了；<br>
世人都晓神仙好，唯有金银忘不了；终朝只恨聚无多，及到多时眼闭了；<br>
世人都晓神仙好，只有娇妻忘不了；君生日日念恩情，君死又随人去了；<br>
世人都晓神仙好，只有儿孙忘不了，痴心父母古来多，孝顺儿孙谁见了。<br></p></blockquote>
]]></content>
  </entry>
  
</feed>
