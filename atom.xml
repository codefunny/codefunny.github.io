<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Peter's Blog]]></title>
  <link href="http://codefunny.github.io/atom.xml" rel="self"/>
  <link href="http://codefunny.github.io/"/>
  <updated>2014-11-27T18:09:48+08:00</updated>
  <id>http://codefunny.github.io/</id>
  <author>
    <name><![CDATA[Peter]]></name>
    <email><![CDATA[winchaozheng@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Javascript学习笔记]]></title>
    <link href="http://codefunny.github.io/blog/2014/11/27/javascript-note/"/>
    <updated>2014-11-27T18:08:26+08:00</updated>
    <id>http://codefunny.github.io/blog/2014/11/27/javascript-note</id>
    <content type="html"><![CDATA[<p>Javascript学习笔记</p>

<!-- more -->


<h1>javascript模块化编写</h1>

<pre><code>event = function(){
    return {
        bind: function(){},
        unbind: function(){},
        trigger: function(){}
    };
}();
</code></pre>

<p>可以参考jQuery的匿名函数执行写法</p>

<pre><code>(function(window){
    //..
    // exports
    window.jQuery = window.$ = jQuery;
})(window);
</code></pre>

<p>Seajs的写法</p>

<pre><code>this.seajs = { _seajs: this.seajs };
</code></pre>

<p>其实上面的this也可以去掉，如Ext</p>

<pre><code>Ext = {
    version : '3.1.0'
};
</code></pre>

<p>下面代码经过在chrome浏览器测试可以运行</p>

<pre><code>//jQuery写法
;(function(window){

    animate = {
        Cat:Cat
    }

    function Cat(name,color){
        this.name = name;
        this.color = color;
        this.type = '猫科动物';
        this.eat = function(){ alert('mouse');};
    }

    window.animate = animate;

})(window);

//执行函数之后，myevent就是{}对象了。
myevent = function(){
    function _show(){
        alert('this is show!');
    }

    return {
        show : _show
    };
}();

//seajs写法
this.peterjs = {_peterjs: this.peterjs};
peterjs = {
    show : function(){
        alert('this is peterjs');
    }
};

peterjs.version = '1.1.0';

//ext写法
Ext = {
    version : '3.1.0'
};
</code></pre>

<p>【参考】</p>

<ol>
<li><a href="http://www.cnblogs.com/snandy/archive/2012/03/08/2378441.html">http://www.cnblogs.com/snandy/archive/2012/03/08/2378441.html</a></li>
</ol>


<h1>Javascript面向对象方法</h1>

<h4>constructor属性和instanceof方法</h4>

<p>constructor属性指向它们的构造函数；<br/>
instanceof运算符，验证原型对象与实例对象之间的关系；</p>

<h4>prototype模式</h4>

<p>javascript规定，每一个构造函数都有一个prototype属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。意味着，可以将那些不变的属性和方法，直接定义在prototype对象上。</p>

<pre><code>function Cat(name,color){
    this.name = name;
    this.color = color;
}
//注意是类名不是实例名
Cat.prototype.type = '猫科动物';
Cat.prototype.eat = function(){ alert('eatmouse'); };

var cat1 = new Cat('damao','orange');
alert(cat1.type);
cat1.eat();
</code></pre>

<h4>isPrototypeOf()和hasOwnProperty()方法与in运算符</h4>

<ol>
<li>isPrototype()用来判断某个prototype对象和某个实例之间的关系</li>
<li>hasOwnProperty()用来判断某一个属性到底是本地属性还是继承自prototype对象的属性.</li>
<li>用于判断某个实例是否含有某个属性，不管是不是本地属性</li>
</ol>


<p>下面代码帮助理解：</p>

<pre><code>alert(Cat.prototype.isPrototypeOf(cat1)); //true
alert(cat1.hasOwnProperty('name')); //true
alert(cat1.hasOwnProperty('type')); //false
alert('name' in cat1); //true
alert('type' in cat1); //true
</code></pre>

<p>【参考】
1. <a href="http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html">http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html</a></p>

<h1>Javascript构造函数的继承</h1>

<p>对象之间继承的5种方法</p>

<pre><code>function Animal(){
    this.species = "animate";
}

function Cat(name,color){
    this.name = name;
    this.color = color;
}
</code></pre>

<p>一、 构造函数绑定
使用call或apple方法，将父对象的构造函数绑定在子对象上</p>

<pre><code>function Cat(name,color){
    Animal.apply(this, arguments);
    this.name = name;
    this.color = color;
}

var cat1 = new Cat('tom','blue');
alert(cat1.species);
</code></pre>

<p>二、prototype模式</p>

<pre><code>Cat.prototype = new Animal();
Cat.prototype.constructor = Cat;
var cat1 = new Cat('tome','blue');
alert(cat1.species);
</code></pre>

<p>对上面需要说明的是第二行，因为第一行将Cat的prototype指向了一个新的对象，那么相应地prototype.constructor也就指向了Animal，不是我们要的结果，所以要加上第二行纠正。</p>

<p>三、直接继承prototype（这个方法是有问题的）
该方法是第二种方法的改进。由于Animal对象中不变的属性都可以直接写入Animal.prototype中，所以可以直接继承Animal.prototype。</p>

<pre><code>function Animal(){}
Animal.prototype.species = "Animal";
Cat.prototype = Animal.prototype;
Cat.prototype.constructor = Cat;
</code></pre>

<p>上面的代码执行效率比较高，因为不用执行和建立Animal的实例。但是有一个缺点就是，任何对Cat。prototype的修改都会反映到Animal.prototype上。就是说第四行实际上也把Animal的构造函数给改了。</p>

<p>四、利用空对象作为中介（这是对上面方法的改进）</p>

<pre><code>function extend(Child,Parent){
    var F = function(){};
    F.prototype = Parent.prototype;
    Child.prototype = new F();
    Child.prototype.constructor = Child;
    Child.uber = Parent.prototype;
}

extend(Cat,Animal);
var cat1 = new Cat('tom','blue');
alert(cat1.species);
</code></pre>

<p>上面F是空对象，几乎不占内存。修改Cat的prototype对象，就不会影响到Animal的prototype对象。uber是备用，指向府对象的原型。</p>

<p>五、拷贝继承</p>

<pre><code>function extend1(Child,Parent){
    var p = Parent.prototype;
    var c = Child.prototype;
    for(var i in p){
        c[i] = p[i];
    }

    c.uber = p;
}
extend1(Cat,Animal);
var cat1 = new Cat('tom','blue');
alert(cat1.species);
</code></pre>

<h1>Javascript非构造函数继承</h1>

<p>深拷贝(jQuery库使用的就是这种继承方法)</p>

<pre><code>function deepCopy(p){
    var c = c || {};
    for(var i in p){
        if(typeof p[i] === 'object'){
           c[i] = (p[i].constructor === Array) ? [] : {};
            deepCopy(p[i],c[i]);
        } else {
            c[i] = p[i];
        }
    }
    return c;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hybrid模式下支付宝钱包APP探秘]]></title>
    <link href="http://codefunny.github.io/blog/2014/11/25/hybrid-alipay-app/"/>
    <updated>2014-11-25T13:16:12+08:00</updated>
    <id>http://codefunny.github.io/blog/2014/11/25/hybrid-alipay-app</id>
    <content type="html"><![CDATA[<p><img src="http://codefunny.github.io/images/custom_images/zhifubaoqianbao.jpg" alt="image" /></p>

<!-- more -->


<p>探秘对象是iOS系统8.3.0版本支付宝钱包，拿到ipa文件之后，进行解压缩处理，从中我们可以看到这几类文件，png的图像、amr结尾的文件、plist文件、bundle文件等文件格式。</p>

<p>在其中有两个文件特别的眼熟，那就是<code>cordovaios.txt</code>和<code>WebViewJavascriptBridge.js.txt</code>文件，打开发现这两个文件没有经过改造，还是原来的配方。amr文件在<a href="http://codefunny.github.io/blog/2014/11/17/hybird-ios/">上一篇</a>已经说明是可压缩文件，大家可以解压缩看看里面的内容，就发现实际上都是一堆js、html、css文件。我们后面再来探秘这一块。</p>

<p>现在我要去找一找传说的<code>AliPayBridge.js</code>在哪里呢，有一个<code>H5Service.bundle</code>引起了我的注意,打开显示里面的内容，在后面有几个js和plist文件，真相开始浮出水面了，打开h5_bridge.js文件，里面终于找到<code>window.AlipayJSBridge</code>的身影。</p>

<p>我的javascript功能还处于初级阶段，也只能大概的了解一下作用，JSAPI主要定义了几大方法，</p>

<blockquote><p>call、trigger、<em>invokeJS、</em>handleMessageFromObjC、_fetchQueue、loadPlugin</p></blockquote>

<p>从名字就可以知道其用途，前面的好说，最后一个<code>loadPlugin</code>，用于载入一个或多个动态插件，采用js来实现动态加载，这个应该就是支付宝钱包最重要的一个方法了。</p>

<p>还有一个<code>h5_bridge_for_scanApp.js</code>，里面有一个scanAppCallFunMap的Dictionary变量，看里面定义了几个重要的方法调用。</p>

<p>前面提过<code>cordovaios.txt</code>，看来阿里是集众家之长，后面再去看一看了，现在我比较关心的是，如何集成这些独立的插件，还有就是如何有效的管理，实际上就是开发框架和安全问题了。</p>

<p>前面我也提到了阿里的arale前端框架，这个框架在11000002.amr里面看到过，在淘宝和天猫页面，我发现了他们有使用另外一个框架KISSY。每个amr里面都有一个<code>Manifest.xml</code>文件和<code>CERT</code>文件，前面应该是配置文件，后面应该是安全相关的证书文件。这一套有机体如何配合完成整个框架还不清楚，继续摸索吧。</p>

<p>这是zepto.js的一个小游戏，我替换了里面的data.js并修改了里面的一些参数，放在博客里面，发现前端的功能越来越好玩了，<a href="http://codefunny.github.io/class/app/lucky.html">点击去玩一玩吧</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[github问题之“Empty reply from server”]]></title>
    <link href="http://codefunny.github.io/blog/2014/11/24/test/"/>
    <updated>2014-11-24T15:33:56+08:00</updated>
    <id>http://codefunny.github.io/blog/2014/11/24/test</id>
    <content type="html"><![CDATA[<p><img src="http://codefunny.github.io/images/custom_images/github-log.jpg" alt="image" /></p>

<!-- more -->


<p>这两个星期，每次提交<code>sudo rake deploy</code>,就会遇到下面的问题</p>

<pre><code>fatal: unable to access ‘https://github.com/xxxxx’: Empty reply from server.
</code></pre>

<p>在网上找了好久，每个解决的办法都不一样，又说是git2.0的问题，需要执行这样的命令<code>git config --global push.default matching</code>，可是还是同样的问题。最后有网友说是git被墙了，需要用vpn提交，看到这样的答案真是无语了，难道就没有办法了吗。</p>

<p>终于功夫不负有心人，又有人提出采用ssh的方式取代https，那么怎么搬到呢，我们需要执行下面的命令，或者到.git/config中修改remote-url，</p>

<pre><code>git remote set-url origin git@github.com:codefunny/codefunny.github.io.git
</code></pre>

<p>然后再提交<code>sudo rake deploy</code>,结果这次报下面的错误：</p>

<pre><code>Permission denied (publickey).
fatal: Could not read from remote repository.
</code></pre>

<p>根据说法就是sshkey正确了，大家就去<a href="https://help.github.com/articles/generating-ssh-keys/#step-3-add-your-ssh-key-to-your-account">https://help.github.com/articles/generating-ssh-keys/#step-3-add-your-ssh-key-to-your-account</a>进行设置，我之前设置过，但还是报错，于是使用<code>ssh -vT git@github.com</code>进行测试，结果我知道了，使用sudo和非sudo使用的sshkey是不一样的，一个在/var/root/目录里,一个是/Users/username/目录下，所以是我使用<code>sudo</code>的缘故，怎么解呢？</p>

<p>那就更改<code>_deploy</code>所属权，将其由root改为username，下面的命令可以帮助到你<code>sudo chown -R username ./_deploy</code>，这样就就可以使用下面的命令再来提交一次<code>rake deploy</code>，正常的情况下会提交成功，在非正常的情况，可能还会出现下面的问题，</p>

<pre><code>error: src refspec master does not match any.
</code></pre>

<p>此时可以尝试做出点修改，再执行一遍下面的命令中的某个或某几个</p>

<pre><code>rake generate
git add .
git commit -am 'modifiy'
rake deploy
</code></pre>

<p>通过上面的探索总算是解决了问题，现在发现在网上找到最正确地答案真是越来越难了，自己不得不一个一个的去校验答案的正确性。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[浅析hybrid模式下地支付宝钱包和微信]]></title>
    <link href="http://codefunny.github.io/blog/2014/11/17/hybird-ios/"/>
    <updated>2014-11-17T10:27:52+08:00</updated>
    <id>http://codefunny.github.io/blog/2014/11/17/hybird-ios</id>
    <content type="html"><![CDATA[<p><img src="http://codefunny.github.io/images/custom_images/weixin-zhifubao.png" alt="image" /></p>

<!-- more -->


<h2>开篇</h2>

<hr />

<p>近期一直在为插件式开发而不断探询，对于android端已经有一套插件式开发的框架，有通过java的反射机制实现的plugin，但目前我还没有找到一套完整的开源的框架，后期继续寻找。而对于iOS端，由于object-c没有java的反射机制，于是就想到了动态加载的方式，而网友们发现苹果公司禁止开发者使用动态库，而只允许使用静态库，所以使用加载动态库的方式目前是行不通了。</p>

<p>那现在就剩下两条路，就是采用webapp开发和hybird模式，对于webapp，现在也是许多人探索的道路了，这种方式的好处和劣势也是相当明显，好处是可以实现跨平台，iOS，android，windowsphone都可以使用，移植性好；不好的地方就是对于目前普遍的3G和4G网络来说，耗费流量也是一个大问题，还有就是在体验上比不了native的快速。不过按照PC端发展和通讯网络的趋势和，webapp是未来的大方向。</p>

<p>而hybird模式就是目前native和webapp之间的一种过渡方式了，采用h5和native相结合的模式，目前已经有相当成熟的发展了，阿里巴巴和腾讯都有自己的一套框架，而网络上也有组织开源了这方面的源码，像phonegap和cordva就是早期的践行者，现在也有不少公司推出了商业版，具体可以到网络上搜寻，今天我要记录的就是我在研究支付宝钱包和微信的hybird开发构想，所有资料均来源于网络。</p>

<h2>前人的研究成果</h2>

<hr />

<p>如果想对支付宝钱包有一些了解可以参考网上的几篇文章，<a href="http://blog.devtang.com/blog/2013/06/23/alipay-plugin-mechanism/">分析支付宝客户端的插件机制</a>、<a href="http://imallen.com/blog/2013/06/26/inside-alipay-plugin.html">浅析支付宝钱包插件</a>和<a href="http://imallen.com/blog/2013/07/06/about-alipay-plugin-and-phonegap.html">再谈支付宝钱包插件和说好的 Demo</a> 网上还有一篇支付宝钱包的文章<a href="http://www.wojilu.com/forum1/post/22475">PhoneGap版支付宝Android客户端开发小结</a>,从内容看应该是内部开发人员的总结，对于微信资料则少之又少，我们要谈的不是开放平台，我其实特想知道他们的开发思路，当然这是商业机密，我只好从现有的表象中去探寻了一点痕迹了。</p>

<p>先谈微信的android版吧，反编译的结果令人失望，腾讯已经对代码作了混淆等针对反编译而进行的防护措施，没有多少可用价值，不过有一个文件还是非常有价值的，那就是wxjs.js，关于这个javascript的发现和研究有人比我要早，大家可以去这里查看<a href="https://github.com/zxlie/WeixinApi">WeixinApi</a>,DarkAbyss也写了一篇介绍 <a href="http://www.gbtags.com/gb/share/2944.htm">weixinJSBridge的介绍</a>,iOS包里的wxjs.js是经过压缩过得，所以看的很吃力，由于所获信息有限，对微信的研究也就只能先进行到这里，期待着其他大牛能够继续努力了。</p>

<p>支付宝钱包前面已经有大牛尝试过分析，但是我还是对bybird模式不是特别清楚，phonegap的源码也有，但是对于长篇大论我向来没有兴趣，而国内介绍的文章大多是转帖几个大牛的文章，而大牛向来不拘小节，只介绍自己感兴趣的，无关的细节则忽略不计，想来这也是大牛不屑于重复别人的构想吧。加上我英文阅读能力有限，只能在茫茫大海似的网络中继续搜寻了。</p>

<h2>hybrid插件</h2>

<hr />

<p>通过对支付宝钱包和微信android端的反编译，发现里面有一些<code>.so</code>文件，在iOS端，微信内部没有发现<code>.so</code>文件，而在支付宝钱包内部，却又一些以<code>.amr</code>,前面有人已经指出，这些其实也是<code>.zip</code>文件，只是为了混淆一下作的掩饰，解压缩之后，里面其实一堆html，js和css的文件，那么我的疑问是app如何加载这些文件内，当然是用webview来加载，但是我的疑问是，app是解压之后的加载，还是在不解压的情况下进行加载，如果解压又解压到哪里，而iOS是不允许解压到<code>MainBundle</code>中的，这个我有做过尝试（<code>模拟器中可以，但是真机上却行不通，我试验的是xcode6，ios8.1,而网络资料显示，苹果这个版本又对app文件目录作了较大的调整</code>），如果解压到Document目录则没有问题。那么我猜想的一种情况是，app在需要的事后将文件解压到其他目录，然后再进行加载，这个过程当然可以通过配置文件控制。那么更大胆的一点想法是类似于Bundle方式，可以直接加载<code>.amr</code>里面的内容。但是我在网上没有找到这方面的资料。如果谁有资料可以发我一些。小弟感激不尽。</p>

<p>再进入到支付宝钱包的<code>.amr</code>内部，发现里面采用的一些webapp框架不像是一个团队开发，很像是几个不同的团队（或人）的作品，因为里面的风格各不相同，不过他们共同使用了zepto.js和sea.js，zepto.js是手机端的jquery，其宗旨就是追求jquery的功能，但是又不使文件过大，简言之就是麻雀虽小五脏俱全，而sea.js则是提供js的模块化开发。当然除了上面两个基本js框架之外，还有其他常用的js框架，比如scroll.js,json.js,fastclick.js等框架。当然在里面也发现了淘宝前端开发组的arale框架，我想阿里现在的研发团队非常多，同一个问题好几个团队在研究，也有好几套方案，这样做虽然说耗费人力，但是可以有效防止因为某一套框架的漏洞而导致整个app的crash，其实最终还会只有一两个的，只是这一两个一定是存优去劣而成的集大成者。</p>

<p>由于在微信上没有什么发现，我也没有去研究腾讯其他的app了，但是也发现腾讯前端也有自己的一套移动web框架了，叫<a href="http://alloyteam.github.io/Spirit/">spirit</a>,有兴趣可以自己去了解一下。可见在开源的道路上，阿里比腾讯走的要远。希望企鹅帝国除了赚钱之余，也能够和大家分享一下自己的研究成果，带领中国广大开发者一起成长进步。</p>

<h2>继续的远征</h2>

<hr />

<p>如果想要继续深入的了解hybrid编程，希望有一个简短易明的demo那岂不很好，最后终于在github上找到了，牛人早已造好车轮，只是我还来不及发现而已，<a href="https://github.com/marcuswestin/WebViewJavascriptBridge">WebViewJavascriptBridge</a>,这是这对iOS和OSX而设计的object-c和javascript通讯框架，已经有好些公司采用这一套了，包括Facebook Messager和Facebook Paper，若问我是怎么知道，那就得问问大牛了。</p>

<p>通过对该份源码的分析，发现其设计之巧妙令人心生佩服，再回来想想支付宝钱包和微信，他们应该都有借鉴这里的设计，然后进行了各自的扩展，我们有人找到了微信的wxjs.js,但是还没有找到alipaybridge.js的源码不知支付宝钱包放到哪里了，或许它的文件不叫这个名字，有时间慢慢找吧。</p>

<p>看完是不是感觉，初极狭，才通人，复行数十步，豁然开朗的感觉，这份源码已经将框架写的很清晰明白了，已经是不需要再多言了，任何的修饰都是累赘了。</p>

<h2>未来的构想</h2>

<hr />

<p>看完之后，发现对于iOS和andorid的开发人员而言，javascript已经是不可忽视的语言了，而且其开发分量将举足轻重，三星的Tizen就尝试了<code>h5+js+css</code>的方式来构建移动app，加上近期微软与<code>Apache Cordova</code>合作，推出的<code>visual studio</code>开始集成支持cordova来开发iOS、android、windowsphone的app，跨平台的壁垒似乎就要被打破了，相信在不久的将来会有更多地javascript人员加入到app的开发队伍中来。</p>

<p>既然hybrid模式是一个过渡阶段的产物，联想到PC端软件的发展过程，手机端最终的模式应该就是完全的h5的开发方式了，至于什么时候会大面积的颠覆，估计还得看网络带宽的进一步提高和资费的进一步降低，手机的硬件升级难度已经越来越大，后期的目标应该是在软件的体验和服务上。</p>

<p>写了这么多，也只是把我自己探索的一个过程整理了出来，后期会继续研究，希望对其他人也有所帮助，如有疏漏，还往大牛赐教。欢迎到<a href="http://codefunny.github.io">我的主页</a>留言。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的大学]]></title>
    <link href="http://codefunny.github.io/blog/2014/11/10/nov/"/>
    <updated>2014-11-10T14:08:32+08:00</updated>
    <id>http://codefunny.github.io/blog/2014/11/10/nov</id>
    <content type="html"><![CDATA[<p><img src="http://i2.tietuku.com/e2fa5448f97d195a.jpg" alt="image" /></p>

<!-- more  -->


<blockquote><p><em>月亮在白莲花般的云朵里穿行，</em><br><br>
<em>晚风吹来一阵阵快乐的歌声。</em><br><br>
<em>我们坐在高高的谷堆旁边，</em><br><br>
<em>听妈妈讲那过去的事情，</em><br><br>
<em>我们坐在高高的谷堆旁边，</em><br><br>
<em>听妈妈讲那过去的事情。</em><br></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开辟鸿蒙]]></title>
    <link href="http://codefunny.github.io/blog/2014/11/08/note-one/"/>
    <updated>2014-11-08T17:01:00+08:00</updated>
    <id>http://codefunny.github.io/blog/2014/11/08/note-one</id>
    <content type="html"><![CDATA[<p><em>2014年11月08日，今天终于把博客搭起来了，真是太周折了！抄诗一首纪念</em>
<br><br></p>

<blockquote><p>世人都晓神仙好，唯有功名忘不了；古今将相在何方，荒冢一堆草没了；<br>
世人都晓神仙好，唯有金银忘不了；终朝只恨聚无多，及到多时眼闭了；<br>
世人都晓神仙好，只有娇妻忘不了；君生日日念恩情，君死又随人去了；<br>
世人都晓神仙好，只有儿孙忘不了，痴心父母古来多，孝顺儿孙谁见了。<br></p></blockquote>
]]></content>
  </entry>
  
</feed>
