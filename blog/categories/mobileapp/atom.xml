<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mobileapp | Peter's Blog]]></title>
  <link href="http://codefunny.github.io/blog/categories/mobileapp/atom.xml" rel="self"/>
  <link href="http://codefunny.github.io/"/>
  <updated>2014-11-22T12:02:09+08:00</updated>
  <id>http://codefunny.github.io/</id>
  <author>
    <name><![CDATA[Peter]]></name>
    <email><![CDATA[winchaozheng@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[浅析hybrid模式下地支付宝钱包和微信]]></title>
    <link href="http://codefunny.github.io/blog/2014/11/17/hybird-ios/"/>
    <updated>2014-11-17T10:27:52+08:00</updated>
    <id>http://codefunny.github.io/blog/2014/11/17/hybird-ios</id>
    <content type="html"><![CDATA[<p><img src="/images/custom_images/weixin-zhifubao.png" alt="image" /></p>

<!-- more -->


<h2>开篇</h2>

<hr />

<p>近期一直在为插件式开发而不断探询，对于android端已经有一套插件式开发的框架，有通过java的反射机制实现的plugin，但目前我还没有找到一套完整的开源的框架，后期继续寻找。而对于iOS端，由于object-c没有java的反射机制，于是就想到了动态加载的方式，而网友们发现苹果公司禁止开发者使用动态库，而只允许使用静态库，所以使用加载动态库的方式目前是行不通了。</p>

<p>那现在就剩下两条路，就是采用webapp开发和hybird模式，对于webapp，现在也是许多人探索的道路了，这种方式的好处和劣势也是相当明显，好处是可以实现跨平台，iOS，android，windowsphone都可以使用，移植性好；不好的地方就是对于目前普遍的3G和4G网络来说，耗费流量也是一个大问题，还有就是在体验上比不了native的快速。不过按照PC端发展和通讯网络的趋势和，webapp是未来的大方向。</p>

<p>而hybird模式就是目前native和webapp之间的一种过渡方式了，采用h5和native相结合的模式，目前已经有相当成熟的发展了，阿里巴巴和腾讯都有自己的一套框架，而网络上也有组织开源了这方面的源码，像phonegap和cordva就是早期的践行者，现在也有不少公司推出了商业版，具体可以到网络上搜寻，今天我要记录的就是我在研究支付宝钱包和微信的hybird开发构想，所有资料均来源于网络。</p>

<h2>前人的研究成果</h2>

<hr />

<p>如果想对支付宝钱包有一些了解可以参考网上的几篇文章，<a href="http://blog.devtang.com/blog/2013/06/23/alipay-plugin-mechanism/">分析支付宝客户端的插件机制</a>、<a href="http://imallen.com/blog/2013/06/26/inside-alipay-plugin.html">浅析支付宝钱包插件</a>和<a href="http://imallen.com/blog/2013/07/06/about-alipay-plugin-and-phonegap.html">再谈支付宝钱包插件和说好的 Demo</a> 网上还有一篇支付宝钱包的文章<a href="http://www.wojilu.com/forum1/post/22475">PhoneGap版支付宝Android客户端开发小结</a>,从内容看应该是内部开发人员的总结，对于微信资料则少之又少，我们要谈的不是开放平台，我其实特想知道他们的开发思路，当然这是商业机密，我只好从现有的表象中去探寻了一点痕迹了。</p>

<p>先谈微信的android版吧，反编译的结果令人失望，腾讯已经对代码作了混淆等针对反编译而进行的防护措施，没有多少可用价值，不过有一个文件还是非常有价值的，那就是wxjs.js，关于这个javascript的发现和研究有人比我要早，大家可以去这里查看<a href="https://github.com/zxlie/WeixinApi">WeixinApi</a>,DarkAbyss也写了一篇介绍 <a href="http://www.gbtags.com/gb/share/2944.htm">weixinJSBridge的介绍</a>,iOS包里的wxjs.js是经过压缩过得，所以看的很吃力，由于所获信息有限，对微信的研究也就只能先进行到这里，期待着其他大牛能够继续努力了。</p>

<p>支付宝钱包前面已经有大牛尝试过分析，但是我还是对bybird模式不是特别清楚，phonegap的源码也有，但是对于长篇大论我向来没有兴趣，而国内介绍的文章大多是转帖几个大牛的文章，而大牛向来不拘小节，只介绍自己感兴趣的，无关的细节则忽略不计，想来这也是大牛不屑于重复别人的构想吧。加上我英文阅读能力有限，只能在茫茫大海似的网络中继续搜寻了。</p>

<h2>hybrid插件</h2>

<hr />

<p>通过对支付宝钱包和微信android端的反编译，发现里面有一些<code>.so</code>文件，在iOS端，微信内部没有发现<code>.so</code>文件，而在支付宝钱包内部，却又一些以<code>.amr</code>,前面有人已经指出，这些其实也是<code>.zip</code>文件，只是为了混淆一下作的掩饰，解压缩之后，里面其实一堆html，js和css的文件，那么我的疑问是app如何加载这些文件内，当然是用webview来加载，但是我的疑问是，app是解压之后的加载，还是在不解压的情况下进行加载，如果解压又解压到哪里，而iOS是不允许解压到<code>MainBundle</code>中的，这个我有做过尝试（<code>模拟器中可以，但是真机上却行不通，我试验的是xcode6，ios8.1,而网络资料显示，苹果这个版本又对app文件目录作了较大的调整</code>），如果解压到Document目录则没有问题。那么我猜想的一种情况是，app在需要的事后将文件解压到其他目录，然后再进行加载，这个过程当然可以通过配置文件控制。那么更大胆的一点想法是类似于Bundle方式，可以直接加载<code>.amr</code>里面的内容。但是我在网上没有找到这方面的资料。如果谁有资料可以发我一些。小弟感激不尽。</p>

<p>再进入到支付宝钱包的<code>.amr</code>内部，发现里面采用的一些webapp框架不像是一个团队开发，很像是几个不同的团队（或人）的作品，因为里面的风格各不相同，不过他们共同使用了zepto.js和sea.js，zepto.js是手机端的jquery，其宗旨就是追求jquery的功能，但是又不使文件过大，简言之就是麻雀虽小五脏俱全，而sea.js则是提供js的模块化开发。当然除了上面两个基本js框架之外，还有其他常用的js框架，比如scroll.js,json.js,fastclick.js等框架。当然在里面也发现了淘宝前端开发组的arale框架，我想阿里现在的研发团队非常多，同一个问题好几个团队在研究，也有好几套方案，这样做虽然说耗费人力，但是可以有效防止因为某一套框架的漏洞而导致整个app的crash，其实最终还会只有一两个的，只是这一两个一定是存优去劣而成的集大成者。</p>

<p>由于在微信上没有什么发现，我也没有去研究腾讯其他的app了，但是也发现腾讯前端也有自己的一套移动web框架了，叫<a href="http://alloyteam.github.io/Spirit/">spirit</a>,有兴趣可以自己去了解一下。可见在开源的道路上，阿里比腾讯走的要远。希望企鹅帝国除了赚钱之余，也能够和大家分享一下自己的研究成果，带领中国广大开发者一起成长进步。</p>

<h2>继续的远征</h2>

<hr />

<p>如果想要继续深入的了解hybrid编程，希望有一个简短易明的demo那岂不很好，最后终于在github上找到了，牛人早已造好车轮，只是我还来不及发现而已，<a href="https://github.com/marcuswestin/WebViewJavascriptBridge">WebViewJavascriptBridge</a>,这是这对iOS和OSX而设计的object-c和javascript通讯框架，已经有好些公司采用这一套了，包括Facebook Messager和Facebook Paper，若问我是怎么知道，那就得问问大牛了。</p>

<p>通过对该份源码的分析，发现其设计之巧妙令人心生佩服，再回来想想支付宝钱包和微信，他们应该都有借鉴这里的设计，然后进行了各自的扩展，我们有人找到了微信的wxjs.js,但是还没有找到alipaybridge.js的源码不知支付宝钱包放到哪里了，或许它的文件不叫这个名字，有时间慢慢找吧。</p>

<p>看完是不是感觉，初极狭，才通人，复行数十步，豁然开朗的感觉，这份源码已经将框架写的很清晰明白了，已经是不需要再多言了，任何的修饰都是累赘了。</p>

<h2>未来的构想</h2>

<hr />

<p>看完之后，发现对于iOS和andorid的开发人员而言，javascript已经是不可忽视的语言了，而且其开发分量将举足轻重，三星的Tizen就尝试了<code>h5+js+css</code>的方式来构建移动app，加上近期微软与<code>Apache Cordova</code>合作，推出的<code>visual studio</code>开始集成支持cordova来开发iOS、android、windowsphone的app，跨平台的壁垒似乎就要被打破了，相信在不久的将来会有更多地javascript人员加入到app的开发队伍中来。</p>

<p>既然hybrid模式是一个过渡阶段的产物，联想到PC端软件的发展过程，手机端最终的模式应该就是完全的h5的开发方式了，至于什么时候会大面积的颠覆，估计还得看网络带宽的进一步提高和资费的进一步降低，手机的硬件升级难度已经越来越大，后期的目标应该是在软件的体验和服务上。</p>

<p>写了这么多，也只是把我自己探索的一个过程整理了出来，后期会继续研究，希望对其他人也有所帮助，如有疏漏，还往大牛赐教。欢迎到<a href="http://codefunny.github.io">我的主页</a>留言。</p>
]]></content>
  </entry>
  
</feed>
