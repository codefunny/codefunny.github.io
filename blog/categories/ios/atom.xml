<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios | Peter's Blog]]></title>
  <link href="http://codefunny.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://codefunny.github.io/"/>
  <updated>2015-10-21T23:31:35+08:00</updated>
  <id>http://codefunny.github.io/</id>
  <author>
    <name><![CDATA[Peter]]></name>
    <email><![CDATA[winchaozheng@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[iOS]和ViewController切换有关的一个问题]]></title>
    <link href="http://codefunny.github.io/blog/2015/10/21/ios-navigationcontroller-push/"/>
    <updated>2015-10-21T23:29:08+08:00</updated>
    <id>http://codefunny.github.io/blog/2015/10/21/ios-navigationcontroller-push</id>
    <content type="html"><![CDATA[<p>这个星期在书上看到一个问题，说A&ndash;>push B,B&ndash;>push C,但是我希望C直接返回到A，对这个问题，大致有几个思路吧：</p>

<!--more-->


<ol>
<li>自定义navigationbar的返回事件，然后利用@selector(popToViewController:animation:)来调到指定ViewController；</li>
<li>在popViewControllerAnimated:的时候，我们执行两次，这样以期达到跳过ViewController的目的；</li>
<li>重写UINavigationController的push和pop方法。</li>
</ol>


<p>以上思路也都没有问题，但是在众多的思路中，应该有一个既解决问题，又让人觉得非常简单地好办法的。要找到这样的办法，当然就得去实验一下了。第1个思路可以解决问题，但是需要在C对象出现A对象的影子。第2个思路执行时会出现问题，我在Xcode7上运行产生一个警告，这个还有瑕疵。第3个就需要好好考虑一下了，我的一个办法是自定义一个数组，push就增加，pop就减少，单独提供一个removeObject的接口，在pop里面改用<code>popToViewController:animation:</code>，这个就是一个重思路，就是简单问题复杂化。</p>

<p>应该有简单地解决思路，是的，确实有一个简单地解决办法，就是在B push C时，先把B出栈，然后让C入栈，我们唯一需要考虑就是页面的平滑过渡。好在SDK里面的API都有支持，下面的代码就是主要的核心过程。可能有人尝试过优化一下第一句，直接用self.navigationController来pop和push乐，至于什么结果你自己去尝试就知道了，总之，要想一想出栈之后，这个self和navigationController之间的关系还存在吗？想通了这个，也就明白了这个简单地思路了。</p>

<pre><code>    UINavigationController *navController = self.navigationController;
    [navController popViewControllerAnimated:NO];
    [navController pushViewController:[[TestViewController alloc] init ] animated:YES];
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开源Objective-C语言封装的iso8583协议实现]]></title>
    <link href="http://codefunny.github.io/blog/2015/08/14/objc-pz8583/"/>
    <updated>2015-08-14T14:50:38+08:00</updated>
    <id>http://codefunny.github.io/blog/2015/08/14/objc-pz8583</id>
    <content type="html"><![CDATA[<p><img src="/images/custom_images/pz8583.jpg" alt="image" /></p>

<!--more-->


<p>这几年接触了蛮多的8583协议，有银联标准版，到各大银行，有些第三方收单平台，大家都在使用iso8583报文协议，但是各个机构制定的协议又都各具特色，不尽相同。不过以我的经验，差别最大的还是各机构在处理密钥方面差别比较大，银联的自不必说，各成员机构也在密钥体系，加密算法等方面稍有差异，不过总得说来是大同小异。</p>

<p>我前后使用C语言、PHP语言、Python语言、C++语言实现过银联标准版的POS终端协议规范，其中PHP和Python版是计划开发作为模拟测试用的，后来进入互联网支付行业，开始iOS的开发，采用的协议也就改为HTTP的方式了，直接的socket使用的就比较少了。恰好，最近帮助朋友开发一个项目，在这个项目中，我又开始接触到了久违的8583协议，于是筹划自己实现一套。</p>

<p>在我筹划过程中，发现已经有一位开发者采用C语言已经实现了这套协议，而且还开源了，在阅读了其源码之后，我深感自己再实现一遍，也不会有他那么完善了，所以我打算采用OC封装他的实现，这样大大缩短了我的开发时间，因为是基于开源的代码，所以我也计划把我封装的代码开源了。一来感谢前人的开源，二来网上这方面的资源也比较少，希望可以帮助其他的同仁，共同进步。</p>

<p>以上就是开源的缘起了，当然开源中去掉了非行业通用做法的部分接口，加之各机构协议上的细小差异，所以你需要作下改造才行。不过基础的8583打包，解包，DES，3DES，PIN的加密(带PAN信息)，MAC的计算(非银联版)。</p>

<p>包括一些字节转换的方法，TLV格式的打包解包也是采用网上的开源代码。最后简单地介绍一下这个开源项目吧，如果需要了解实现细节，我觉得代码胜过一切。</p>

<p>ObjC-PZ8583是基于BerTlv和Oscar-ISO8583的基础上进行的iOS封装，底层8583的打包和拆包使用了C语言的Oscar-ISO8583版本，为了适应开发需求，进行了Objective-C的封装，使得使用起来更方便一些。</p>

<p>附件一段签到的代码实现吧,项目源码地址:<a href="https://github.com/codefunny/ObjC-PZ8583">ObjC-PZ8583</a>。Enjoy it！</p>

<pre><code>- (void)mposGetWorkKeyFromServerWithBlock:(void(^)(NSString *text))display {
    display(@"----------------签到-------------");
//    NSString *lmk = @"a2dff4e59289a82fc740f4f4e5d997e6";
    NSString *lmk = self.masterKey;
    BOOL ret =[self.sockMgr startStop];
    if (ret ) {
        PZSignInRequest *request = [PZSignInRequest new];
        [request.posFields setTranTtc:self.transTtc];
        [request.posFields setTerminalId:self.terminalId];
        [request.posFields setMerchantId:self.merchantId];
        PZPrivateField60 *field60 = [PZPrivateField60 new];
        field60.msgType = kSignInField60MsgType;
        field60.batchNumber = self.batchNumber;
        field60.networkCode = kSignInField60Network;
        [request.posFields setPrivate60:[field60 encode]];
        [request setOprNumber:@"01 "];

        NSData *data = [request encode];
        NSLog(@"send:%@",data);

        display(request.posFields.description);

        __block NSData *recvData = nil;
        [self.sockMgr sendDataToServer:data finishCallBack:^(NSData *pospData,NSError *error){
            if (!error) {
                recvData = [pospData subdataWithRange:NSMakeRange(2, pospData.length -2)];

                PZSignInResponse  *signResp = [PZSignInResponse new];
                [signResp decode:recvData];

                display(signResp.posFields.description);

                if ([signResp.respCode isEqualToString:kResponseCodeSuccess00]) {
                    NSLog(@"%@",[signResp.private62 description]);
                    PZPrivateField62    *field62 = signResp.private62;
                    NSString *pinKey = [NSString decrypt3Des:field62.pinKey withKey:lmk];
                    NSString *macKey = [NSString decrypt3Des:field62.macKey withKey:lmk];
                    NSString *trkKey = [NSString decrypt3Des:field62.trkKey withKey:lmk];

                    NSString    *pinCheck = [NSString encrypt3Des:@"0000000000000000" withKey:pinKey];
                    NSString    *macCheck = [NSString encrypt3Des:@"0000000000000000" withKey:macKey];
                    NSString    *trkCheck = [NSString encrypt3Des:@"0000000000000000" withKey:trkKey];

                    NSLog(@"pinkey:%@,check:%@;macKey:%@,check:%@;trkKey:%@,check:%@",pinKey,pinCheck,macKey,macCheck,trkKey,trkCheck);
                    NSString    *log = [NSString stringWithFormat:@"%@\npinkey:%@,check:%@;macKey:%@,check:%@;trkKey:%@,check:%@",[signResp.private62 description],pinKey,pinCheck,macKey,macCheck,trkKey,trkCheck];
                    display(log);

                    self.pinKey = pinKey;
                    self.macKey = macKey;
                    self.trkKey = trkKey;

                } else {
                    NSLog(@"response:%@",signResp.respCode);
                }
            }
            [self.sockMgr didDisconnected];
        }];
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【iOS】HTTPS的使用学习]]></title>
    <link href="http://codefunny.github.io/blog/2015/08/10/ios-https/"/>
    <updated>2015-08-10T11:46:31+08:00</updated>
    <id>http://codefunny.github.io/blog/2015/08/10/ios-https</id>
    <content type="html"><![CDATA[<p>使用HTTPS最主要的考虑就是数据的安全性。对于HTTPS如何确保数据安全，依靠的就是SSL/TSL层的加密机制。HTTPS也就是在原来的HTTP层的基础上增加了一个安全层。</p>

<p>我们需要了解的是HTTPS在建立安全连接时采取四次握手机制,会话密钥的产生。使用会话密钥主要是因为建立安全机制的密钥算法是非对称算法(一般是RSA)，计算比较耗时，而会话密钥使用的是对称密钥，可以提高会话的效率。</p>

<!-- more -->


<ol>
<li>客户端向服务器端发起连接请求，上送信息有：支持协议版本、随机数1、加密方法、支持压缩算法；</li>
<li>服务器回应，下发信息有：确认协议版本、随机数2、确认加密方法、服务器公钥证书；</li>
<li>客户端再次上送信息：随机数3(采用公钥加密)、编码改变通知、客户端握手结束通知；</li>
<li>服务器采用随机数1、随机数2和随机数3组成会话密钥，并回应：编码改变通知、服务器握手结束通知。</li>
</ol>


<p>以上四次握手中，完成了几件事情，第一，证书下发；第二，会话密钥；第三，确认双方参数(双方协议版本、加密方法等)。其中随机数1和随机数2是明文，随机数3是密文，之所以采用三个随机数来确定会话密钥，主要是三组随机数组成的随机数，确保了随机数的随机性，从而保证每次生成的会话密钥的安全性。</p>

<p>在默认情况下，iOS要求连接的HTTPS站点必须为CA签名过得合法证书。AFNetworking基于iOS的HTTP网络通讯库，自然在证书方面要求和系统是一致，也需要合法的站点证书。所以探讨HTTPS在iOS开发中的使用，我们主要考虑两个问题，一个是合法证书，一个是自建证书。</p>

<p>先来了解一下系统API的验证流程，HTTPS的相关API在Security.Framework中，如下：</p>

<ol>
<li>获取需要验证的信任对象(Trust Object)，在NSURLConnection来说，是从delegate方法<strong>-connection:willSendRequestForAuthenticationChallenge:</strong>回调回来的参数challenge中获取(<strong>[challenge.protectionSpace serverTrust]</strong>);</li>
<li>采用系统默认方式验证Trust Object,SecTrustEvaluate会根据Trust Object的验证策略，一级一级往上，验证证书上每一级数字签名的有效性，从而评估证书的有效性；</li>
<li>通过上一步，一般安全要求下，直接验证通过，下一步使用Trust Object生成一份凭证(<strong>[NSURLCredential credentialForTrust:serverTrust]</strong>)，传入challenge的sender中(<strong>[challenge.sender useCredential:cred forAuthenticationChallenge:challenge]</strong>)处理，建立连接；</li>
<li>如果有更强的安全要求，还可以继续对Trust Object进行更严格验证，常用方式为在本地导入证书，验证Trust Object与导入证书是否匹配；</li>
<li>如果验证失败，取消此次Challenge-Response Authentication验证流程，拒绝连接请求。</li>
</ol>


<p>如果是自建证书，那么会跳过第二步，因为自建证书的根CA数字签名不在系统的信任列表中。</p>

<p>上代码</p>

<pre><code class="objc ">// Now start the connection
NSURL * httpsURL = [NSURL URLWithString:@"https://www.google.com"];
self.connection = [NSURLConnection connectionWithRequest:[NSURLRequest requestWithURL:httpsURL] delegate:self];

//回调
- (void)connection:(NSURLConnection *)connection willSendRequestForAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge {
    //1)获取trust object
    SecTrustRef trust = challenge.protectionSpace.serverTrust;
    SecTrustResultType result;

   //2)SecTrustEvaluate对trust进行验证
    OSStatus status = SecTrustEvaluate(trust, &amp;result);
    if (status == errSecSuccess &amp;&amp;
        (result == kSecTrustResultProceed ||
        result == kSecTrustResultUnspecified)) {

   //3)验证成功，生成NSURLCredential凭证cred，告知challenge的sender使用这个凭证来继续连接
        NSURLCredential *cred = [NSURLCredential credentialForTrust:trust];
        [challenge.sender useCredential:cred forAuthenticationChallenge:challenge];
    } else {
        //5)验证失败，取消这次验证流程
        [challenge.sender cancelAuthenticationChallenge:challenge];

  }
}
</code></pre>

<p>对于自建证书我们需要先在本地导入证书，设置成需要验证的Anchor Certificate，再来验证。如下：</p>

<pre><code class="objc">//先导入证书
NSString * cerPath = ...; //证书的路径
NSData * cerData = [NSData dataWithContentsOfFile:cerPath];
SecCertificateRef certificate = SecCertificateCreateWithData(NULL, (__bridge CFDataRef)(cerData));
self.trustedCertificates = @[CFBridgingRelease(certificate)];

//回调
- (void)connection:(NSURLConnection *)connection willSendRequestForAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge {
    //1)获取trust object
    SecTrustRef trust = challenge.protectionSpace.serverTrust;
    SecTrustResultType result;

    //注意：这里将之前导入的证书设置成下面验证的Trust Object的anchor certificate
    SecTrustSetAnchorCertificates(trust, (__bridge CFArrayRef)self.trustedCertificates);

    //2)SecTrustEvaluate会查找前面SecTrustSetAnchorCertificates设置的证书或者系统默认提供的证书，对trust进行验证
    OSStatus status = SecTrustEvaluate(trust, &amp;result);
    if (status == errSecSuccess &amp;&amp;
        (result == kSecTrustResultProceed ||
        result == kSecTrustResultUnspecified)) {

        //3)验证成功，生成NSURLCredential凭证cred，告知challenge的sender使用这个凭证来继续连接
        NSURLCredential *cred = [NSURLCredential credentialForTrust:trust];
        [challenge.sender useCredential:cred forAuthenticationChallenge:challenge];

    } else {

        //5)验证失败，取消这次验证流程
        [challenge.sender cancelAuthenticationChallenge:challenge];

  }
}
</code></pre>

<p>一般我们很少直接使用原生API，而是使用AFNetworking封装好的接口来完成以上繁琐的过程，目前AFNetworking也已经更新到2.x版本了。</p>

<p>一般我们只需要如下代码就可使接口支持HTTPS：</p>

<pre><code class="objc">AFSecurityPolicy *securityPolicy = [AFSecurityPolicy defaultPolicy];
    securityPolicy.allowInvalidCertificates = YES;
</code></pre>

<p>对于自建证书，AFNetworking2也是支持的，需要将pem格式的证书转成cer格式的，可以在mac下使用如下命令行：<strong>openssl x509 -in &lt;你的服务器证书>.pem -outform der -out server.cer</strong>将该证书引入到ap的bundle目录里，AFNetworking会自动扫描boundle中的.cer文件。</p>

<pre><code class="objc">AFSecurityPolicy *securityPolicy = [AFSecurityPolicy AFSSLPinningModeCertificate];
或者
AFSecurityPolicy *securityPolicy = [AFSecurityPolicy AFSSLPinningModePublicKey];
securityPolicy.allowInvalidCertificates = YES; //还是必须设成YES
</code></pre>

<p>上面只列了一个参数，我想下面技术最好都要知道：</p>

<pre><code class="objc">//allowInvalidCertificates 是否允许无效证书（也就是自建的证书），默认为NO
//如果是需要验证自建证书，需要设置为YES
securityPolicy.allowInvalidCertificates = YES;

//validatesDomainName 是否需要验证域名，默认为YES；
//假如证书的域名与你请求的域名不一致，需把该项设置为NO
//主要用于这种情况：客户端请求的是子域名，而证书上的是另外一个域名。因为SSL证书上的域名是独立的，假如证书上注册的域名是www.google.com，那么mail.google.com是无法验证通过的；当然，有钱可以注册通配符的域名*.google.com，但这个还是比较贵的。
securityPolicy.validatesDomainName = NO;

//validatesCertificateChain 是否验证整个证书链，默认为YES
//设置为YES，会将服务器返回的Trust Object上的证书链与本地导入的证书进行对比，这就意味着，假如你的证书链是这样的：
//GeoTrust Global CA 
//    Google Internet Authority G2
//        *.google.com
//那么，除了导入*.google.com之外，还需要导入证书链上所有的CA证书（GeoTrust Global CA, Google Internet Authority G2）；
//如是自建证书的时候，可以设置为YES，增强安全性；假如是信任的CA所签发的证书，则建议关闭该验证；
securityPolicy.validatesCertificateChain = NO;
</code></pre>

<p>另外需要知道的是，验证站点证书时通过域名的，如果服务器站点没有绑定域名，仅靠IP地址，上面的方法是不行的，解决的办法就是修改AFNetworking2的代码，在AFSecurityPolicy.m文件中，修改：<strong>- (BOOL)evaluateServerTrust:(SecTrustRef)serverTrust
                  forDomain:(NSString *)domain</strong>方法，将里面的部分校验代码注释掉：</p>

<pre><code class="objc">//            SecTrustSetAnchorCertificates(serverTrust, (__bridge CFArrayRef)pinnedCertificates);
//
//            if (!AFServerTrustIsValid(serverTrust)) {
//                return NO;
//            }
//
//            if (!self.validatesCertificateChain) {
//                return YES;
//            }
</code></pre>

<p>有了上面的了解，我们就可以去实践一下HTTPS的开发了。Enjoy it！</p>

<p>学习来源：</p>

<ol>
<li><a href="http://my.oschina.net/non6/blog/290175">iOS实用技巧 - AFNetworking2安全的使用自签证书访问HTTPS</a></li>
<li><a href="http://oncenote.com/2014/10/21/Security-1-HTTPS/">iOS安全系列之一：HTTPS</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html">SSL/TLS协议运行机制的概述</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html">图解SSL/TLS协议</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【IOS】Reveal利器之使用]]></title>
    <link href="http://codefunny.github.io/blog/2015/07/23/ios-reveal-apply/"/>
    <updated>2015-07-23T12:00:01+08:00</updated>
    <id>http://codefunny.github.io/blog/2015/07/23/ios-reveal-apply</id>
    <content type="html"><![CDATA[<p>网上有很多教程，我结合自己的经验，总结了一个方便地使用方法，在下面描述我的使用流程。</p>

<!-- more -->


<p>1.获得Reveal的framework，在Reveal中拿到Reveal.framework拷贝到一个目录，本地调试UI都引用这个目录的framework，不用copy到具体的工程中；</p>

<p>2.在工程中新建一个Tagets，命名位RevealTest区分一下，然后在Build Setting中的Other Linker Flags项添加-ObjC -framework Reveal两项；</p>

<p>3.别忘了在Linked Frameworks and Libraries中添加Reveal.framework进来。</p>

<p>4.接下来就是启动Reveal和工程了，注意要编译的是RevealTest目标，这样就不用担心对生产版本造成影响了。</p>

<p>附：比较方便的办法是copy一下TARGETS，然后添加上面的设置，不过copy一份targets发现identifier后面加了一个copy字样，可能会有一些警告之类的信息，可以到Build Setting中修改Product Name，去掉后面的copy字符即可。</p>

<p>展示一个我的项目的UI截图，</p>

<p><img src="http://codefunny.github.io/images/custom_images/zhiyue-reveal.jpg" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【IOS】只有RSA模和指数，如何完成加密]]></title>
    <link href="http://codefunny.github.io/blog/2015/07/04/ios-rsa/"/>
    <updated>2015-07-04T17:02:23+08:00</updated>
    <id>http://codefunny.github.io/blog/2015/07/04/ios-rsa</id>
    <content type="html"><![CDATA[<blockquote><p>最近在项目中遇到RSA的加密解密问题，如果采用一般证书的方式也就没有这篇文章了，情况是这样的，RSA公钥存在服务器，需要联机获取，可以获取到RSA密钥的模值、有效期、指数、算法标识、索引等信息，这些信息是ASCII码格式，这些信息如何利用IOS的加密API进行RSA运算就成了一个问题。这篇文章就是记述探索问题答案的过程，希望对遇到同样问题的同行有所帮助。</p></blockquote>

<!-- more -->


<h4>获取的RSA模和指数</h4>

<pre><code>modulus: ADDC2B26BBA0E8BC8D532444656E367FD28924B5CB992728B87AB7DF09BA4043259AA8DF42D53D75CBF671DC617053BA5260CEEB42386431C3C3837C02AF5D8C665FB42F2F0949445133AEACE2DDE00CD8562D65978A6E057A3F18A63B0086E83A9A16A77C5F459ECCFD41D9E58ACF890B22E49428E9ADD21DD1A483E46AD3C1
exponent:
010001
</code></pre>

<p>这是ASCII格式的公钥，在网上查询了一下RSA公钥的格式，发现X.509 DER编码和X.509 PAM编码，其中DER编码是ASCII格式，PAM编码是Base64格式，且他们只放证书，不含私钥。根据模值，可以判断，我们采用的应该是DER编码。那么DER编码的格式，就要弄清楚一下了。</p>

<h4>X.509 DER编码格式</h4>

<p>网上有一篇文章<a href="http://m.blog.csdn.net/blog/lingruoshui/11473755">RSA公钥DER编码</a>根据这篇文章可以推断出我们的DER编码格式应该是这样的，</p>

<pre><code>30818902818100ADDC2B26BBA0E8BC8D532444656E367FD28924B5CB992728B87AB7DF09BA4043259AA8DF42D53D75CBF671DC617053BA5260CEEB42386431C3C3837C02AF5D8C665FB42F2F0949445133AEACE2DDE00CD8562D65978A6E057A3F18A63B0086E83A9A16A77C5F459ECCFD41D9E58ACF890B22E49428E9ADD21DD1A483E46AD3C10203010001
解析一下可以分成以下几个部分（大家可以了解以下TLV结构）：
308189：30开始，81代表后面一个字节表示长度，89表示后面有137字节；
028181：02开始，81同上，81表示modulus长度129，前面补了00；
00ADDC2B26BBA0E8BC8D532444656E367FD28924B5CB992728B87AB7DF09BA4043259AA8DF42D53D75CBF671DC617053BA5260CEEB42386431C3C3837C02AF5D8C665FB42F2F0949445133AEACE2DDE00CD8562D65978A6E057A3F18A63B0086E83A9A16A77C5F459ECCFD41D9E58ACF890B22E49428E9ADD21DD1A483E46AD3C1：modulus
0203010001：02开始，03表示后面三个字节，exponent值（010001）。
</code></pre>

<h4>RSA在IOS中的常见用法</h4>

<p><a href="http://blog.iamzsx.me/show.html?id=155002">iOS下的RSA加密方法</a>这篇文章常见用法之一，使用公钥证书，利用系统方法最终获得<strong>SecKeyRef publicKey</strong>，但是我们现在遇到的问题就是没有证书，我尝试过利用上面组装的DER送给<strong>SecCertificateCreateWithData</strong>，但是结果是返回nil值，这说明，我们的格式还不是该方法的参数，那么该方法的参数是神马呢，我跟踪了一个公钥证书，打印NSData值，发现其编码格式如下（中间部分经过我的处理，方便大家观察）：</p>

<pre><code>308202e4 3082024d a0030201 02020900 b524e21a d8b61f68 300d0609 2a864886 f70d0101 05050030 818a310b 30090603 55040613 02434e31 11300f06 03550408 0c085368 616e6768 61693111 300f0603 5504070c 08536861 6e676861 69310e30 0c060355 040a0c05 42616979 69310e30 0c060355 040b0c05 42616979 69311030 0e060355 04030c07 596f726b 2e477531 23302106 092a8648 86f70d01 09011614 67797135 33313939 32304067 6d61696c 2e636f6d 301e170d 31313130 32363032 34353332 5a170d31 31313132 35303234 3533335a 30818a31 0b300906 03550406 1302434e 3111300f 06035504 080c0853 68616e67 68616931 11300f06 03550407 0c085368 616e6768 6169310e 300c0603 55040a0c 05426169 7969310e 300c0603 55040b0c 05426169 79693110 300e0603 5504030c 07596f72 6b2e4775 31233021 06092a86 4886f70d 01090116 14677971 35333139 39323040 676d6169 6c2e636f 6d30819f
    300d0609 2a864886 f70d0101 010500
    03 818d
    0030 81890281 81
    00addc 2b26bba0 e8bc8d53 2444656e 367fd289 24b5cb99 2728b87a b7df09ba 4043259a a8df42d5 3d75cbf6 71dc6170 53ba5260 ceeb4238 6431c3c3 837c02af 5d8c665f b42f2f09 49445133 aeace2dd e00cd856 2d65978a 6e057a3f 18a63b00 86e83a9a 16a77c5f 459eccfd 41d9e58a cf890b22 e49428e9 add21dd1 a483e46a d3c1
    0203 010001
    a3 50304e30 1d060355 1d0e0416 04148888 b8b699e8 44822fcc c1164e95 dd662e58 65ed301f 0603551d 23041830 16801488 88b8b699 e844822f ccc1164e 95dd662e 5865ed30 0c060355 1d130405 30030101 ff300d06 092a8648 86f70d01 01050500 03818100 1d0652cb 2ca15103 b3dbd0c6 4d03ccda fca41d22 75f23e15 aae5e3a3 999d6e59 c0fbb776 f4a6850f b245d87b 05ae7824 2caf472d 0971607e 7d980ee1 0a2b3516 d555b052 b8f83ac0 bccfb9ab 32f53a66 69a61a2c b2887a76 ba67ad1a 15647085 acddebe8 48b0a4cc 4c4c5a5a 39dd6e51 1b840b23 76983a40 cb0ababb 3dfa2ceb 
</code></pre>

<p>可以发现中间那部分就是我们前面的DER编码格式，但是前后那一大段是神马东西呢，这又困扰了我，这个问题先放一放。接下来，要介绍一个最关键的，实际上得益于该作者的成果，我才解决了这个问题，同时也大概知道了上面那一堆大概是神马东东。</p>

<h4>找到通往罗马的道路</h4>

<p>在互联网上搜寻了，找到一篇文章<a href="http://www.ideawu.com/blog/post/132.html">iOS Objective-C RSA encrypt with only public key and descrypt with PHP</a>,这篇文章我看过几次，我一开始认为，里面的公钥就是我上面产生公钥的Base64编码格式，所以，我进行了Base64编码，同时参照其模式，添加了&mdash;&ndash;BEGIN PUBLIC KEY&mdash;&ndash;和&mdash;&ndash;END PUBLIC KEY&mdash;&ndash;，但是依然返回nil，于是我将下面的字符进行Base64解码：</p>

<pre><code>MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDEChqe80lJLTTkJD3X3Lyd7Fj+
zuOhDZkjuLNPog3YR20e5JcrdqI9IFzNbACY/GQVhbnbvBqYgyql8DfPCGXpn0+X
NSxELIUw9Vh32QuhGNr3/TBpechrVeVpFPLwyaYNEk1CawgHCeQqf5uaqiaoBDOT
qeox88Lc1ld7MsfggQIDAQAB
</code></pre>

<p>得到的数据和DER很像，但是其前面多了一些数据，查看其github上的源码才知道前面还有ASN.1 public key header和PKCS #1 rsaEncryption szOID_RSA_RSA，这个部分解释了上面一长串数据的含义。一开始我忽略了作者这样做的意图，后来我跟踪了从证书中获取公钥，打印了一下SecKeyRef的值，得到下面的结果：</p>

<pre><code>&lt;SecKeyRef algorithm id: 1, key type: RSAPublicKey, version: 3, block size: 1024 bits, exponent: {hex: 10001, decimal: 65537}, modulus: ADDC2B26BBA0E8BC8D532444656E367FD28924B5CB992728B87AB7DF09BA4043259AA8DF42D53D75CBF671DC617053BA5260CEEB42386431C3C3837C02AF5D8C665FB42F2F0949445133AEACE2DDE00CD8562D65978A6E057A3F18A63B0086E83A9A16A77C5F459ECCFD41D9E58ACF890B22E49428E9ADD21DD1A483E46AD3C1, addr: 0x17c85800&gt;
</code></pre>

<p>这一下子让我想到能不能自己create一个SecKeyRef，因为它的参数我都可以获取，有了这个想法，又经历了一番曲折，最终在阅读ideawu的源码时得到了答案。<a href="https://github.com/codefunny/IOS-RSA/tree/master">源码看这里</a>。剩下的就只有看代码了。</p>

<p>有看到有网友在网上发帖说尝试了很多方式，在IOS上没办法解决这个问题，看到这个我几乎要放弃了，但是最终还是幸运的解决了这个问题，有时候多一次回眸，可能结局就不一样，我们不缺少答案，只是要耐心的寻找。</p>
]]></content>
  </entry>
  
</feed>
